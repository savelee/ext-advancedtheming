=== FormPanel

==== What it is
A panel that is required to hold form fields. Under the covers it has
several mechanisms for sending and validating forms.

==== Specs

===== CSS Class: +.x-panel+

===== +Ext.form.Panel+
Extends from +Ext.panel.Panel+

* Panel Header (+.x-panel-header+)
** +title+
** +glyph+
** +tools+
* Panel Body (+.x-panel-body+)
* (optional) Docked Toolbar (+.x-toolbar+)
** +waitTitle+
** +buttons+
** +height+
** +width+
** +margin+
** +padding+
** +bodyPadding+

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.Panel

[[components_formpanels]]
.Ext.form.Panel
image::images/panels.png[]

==== Example
[[panels]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    title: 'Simple Form',
    bodyPadding: 5,
    width: 350,

    // The form will submit an AJAX request to this URL when submitted
    url: 'save-form.php',

    // Fields will be arranged vertically, stretched to full width
    layout: 'anchor',
    defaults: {
        anchor: '100%'
    },

    // The fields
    defaultType: 'textfield',
    items: [{
        fieldLabel: 'First Name',
        name: 'first',
        allowBlank: false
    },{
        fieldLabel: 'Last Name',
        name: 'last',
        allowBlank: false
    }],

    // Reset and Submit buttons
    buttons: [{
        text: 'Reset',
        handler: function() {
            this.up('form').getForm().reset();
        }
    }, {
        text: 'Submit',
        formBind: true, //only enabled once the form is valid
        disabled: true,
        handler: function() {
            var form = this.up('form').getForm();
            if (form.isValid()) {
                form.submit({
                    success: function(form, action) {
                       Ext.Msg.alert('Success', action.result.msg);
                    },
                    failure: function(form, action) {
                        Ext.Msg.alert('Failed', action.result.msg);
                    }
                });
            }
        }
    }],
    renderTo: Ext.getBody()
});
----
====


=== Textfield

==== What it is
A plain form field for entering text.

But there is one important difference.
A (text) field in Ext JS is the input field plus the label all together.

Under the hood all fields are little html tables.
Where the label is the left +<td>+.
The field is the 2nd +<td>+.
Optionally the 3rd +<td>+ contains a trigger button.

==== Specs

===== CSS Class: +.x-field-default+ or +.x-form-type-text+

===== +Ext.form.field.Text+
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-type-text+)
* error (+.x-form-invalid+)
** +size+
** +grow+
** +growMin+
** +growMax+
** +emptyText+
** +minLength+
** +maxLength+

http://http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Text-cfg-blankText

[[components_textfield]]
.Ext.form.field.Text
image::images/textfield.png[]

==== Example
[[textfield]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    title: 'Contact Info',
    width: 300,
    bodyPadding: 10,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield',
        name: 'name',
        emptyText: "please enter name",
        fieldLabel: 'Name',
        allowBlank: false  // requires a non-empty value
    }]
});
----
====

=== Textarea

==== What it is
A text field for entering multiple rows of text.
In addition, it supports automatically growing the height of the textarea to fit its content.

==== Specs

===== CSS Class: +.x-field-default+ or +.x-form-type-text+

===== Ext.form.field.TextArea
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-type-text+)
* error (+.x-form-invalid+)
** +rows+
** +cols+
** +growMin+
** +growMax+

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.TextArea

[[components_textarea]]
.Ext.form.field.TextArea
image::images/textarea.png[]

==== Example
[[panels]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.FormPanel', {
    title      : 'Sample TextArea',
    width      : 400,
    bodyPadding: 10,
    renderTo   : Ext.getBody(),
    items: [{
        xtype     : 'textareafield',
        grow      : true,
        name      : 'message',
        fieldLabel: 'Message',
        anchor    : '100%'
    }]
});
----
====

=== Combobox

==== What it is
A ComboBox control (is like a select dropdown) with support for autocomplete, remote loading, and many other features.

A ComboBox is like a combination of a traditional HTML text <input> field and a <select> field; the user is able to type freely into the field, and/or pick values from a dropdown selection list. The user can input any value by default, even if it does not appear in the selection list.

==== Specs

===== CSS Class: +.x-form-trigger-input-cell+ (field), +.x-trigger-cell+ (trigger) and +.x-boudlist+ (list)

===== Ext.form.field.ComboBox
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-type-text+)
* error (+.x-form-invalid+)
** +growToLongestValue+
* boundlist (+.x-boundlist+)
** +multiSelect+
** +typeAhead+
** +typeAheadDelay+
* arrow trigger (+.x-form-arrow-trigger+)

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.ComboBox

[[components_combobox]]
.Ext.form.field.ComboBox
image::images/combobox.png[]

==== Example
[[combo]]
.Example
====
[source, javascript]
----
// The data store containing the list of states
var states = Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data : [
        {"abbr":"AL", "name":"Alabama"},
        {"abbr":"AK", "name":"Alaska"},
        {"abbr":"AZ", "name":"Arizona"}
        //...
    ]
});

// Create the combo box, attached to the states data store
Ext.create('Ext.form.ComboBox', {
    fieldLabel: 'Choose State',
    store: states,
    queryMode: 'local',
    displayField: 'name',
    valueField: 'abbr',
    renderTo: Ext.getBody()
});
----
====

=== Checkbox

==== What it is
Single checkbox. To check one or more option boxes.

==== Specs

===== CSS Class: +.x-form-type-checkbox+

===== Ext.form.field.Checkbox
Extends from +Ext.form.field.Base+

* checkbox (+.x-form-type-checkbox+)
* checkbox wrapper (+.x-form-cb-wrap+)
* checkbox (+.x-form-cb+)
** checked
** checkedCls
** fieldCls
* label (+.x-form-cb-label+)
** afterBoxLabelTextTpl
** beforeBoxLabelTextTpl
** boxLabel
** boxLabelAlign
** boxLabelCls

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Checkbox

[[components_checkbox]]
.Ext.form.field.Checkbox
image::images/checkbox.png[]

==== Example
[[checkbox]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    items: [
        {
            xtype: 'fieldcontainer',
            fieldLabel: 'Toppings',
            defaultType: 'checkboxfield',
            items: [
                {
                    boxLabel  : 'Anchovies',
                    name      : 'topping',
                    inputValue: '1',
                    id        : 'checkbox1'
                }, {
                    boxLabel  : 'Artichoke Hearts',
                    name      : 'topping',
                    inputValue: '2',
                    checked   : true,
                    id        : 'checkbox2'
                }, {
                    boxLabel  : 'Bacon',
                    name      : 'topping',
                    inputValue: '3',
                    id        : 'checkbox3'
                }
            ]
        }
    ],
    renderTo: Ext.getBody()
});
----
====

=== Radio

==== What it is
Single radio field. Similar to checkbox but pick only one option field.

==== Specs

===== CSS Class: +.x-form-type-radio+

===== Ext.form.field.Radio
Extends from +Ext.form.field.Base+ and +Ext.form.field.CheckBox+

* checkbox (+.x-form-type-radio+)
* checkbox wrapper (+.x-form-cb-wrap+)
* checkbox (+.x-form-cb+)
** checked
** checkedCls
** fieldCls
* label (+.x-form-cb-label+)
** afterBoxLabelTextTpl
** beforeBoxLabelTextTpl
** boxLabel
** boxLabelAlign
** boxLabelCls

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Radio

[[components_radio]]
.Ext.form.field.Radio
image::images/radio.png[]

==== Example
[[radio]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    title      : 'Order Form',
    width      : 300,
    bodyPadding: 10,
    renderTo   : Ext.getBody(),
    items: [
        {
            xtype      : 'fieldcontainer',
            fieldLabel : 'Size',
            defaultType: 'radiofield',
            defaults: {
                flex: 1
            },
            layout: 'hbox',
            items: [
                {
                    boxLabel  : 'M',
                    name      : 'size',
                    inputValue: 'm',
                    id        : 'radio1'
                }, {
                    boxLabel  : 'L',
                    name      : 'size',
                    inputValue: 'l',
                    id        : 'radio2'
                }, {
                    boxLabel  : 'XL',
                    name      : 'size',
                    inputValue: 'xl',
                    id        : 'radio3'
                }
            ]
        }
  
    ]
});
----
====

=== Datefield

==== What it is
Provides a date input field with a date picker dropdown and automatic date validation.

==== Specs

===== CSS Class: +.x-form-trigger-input-cell+ (field), +.x-trigger-cell+ (trigger) and +.x-datepicker+ (calendar)

===== Ext.form.field.Date
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-type-text+)
* date trigger (+.x-form-date-trigger+)
* calendar (+.x-datapicker+)
** +showToday+
** +startDay+
** +matchFieldWidth+
** +altFormats+
** +disabledDates+
** +disabledDays+
** +format+

http://http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Date

[[components_date]]
.Ext.form.field.Date
image::images/date.png[]

==== Example
[[datefield]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    width: 300,
    bodyPadding: 10,
    title: 'Dates',
    items: [{
        xtype: 'datefield',
        anchor: '100%',
        fieldLabel: 'To',
        name: 'to_date',
        value: new Date()  // defaults to today
    }]
});
----
====

=== Displayfield

==== What it is
A display-only text field which is not validated and not submitted. This is useful for when you want to display a value from a form's loaded data but do not want to allow the user to edit or submit that value. 

==== Specs

===== CSS Class: +.x-field-default+ or +.x-form-readonly+

===== Ext.form.field.Display
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-readonly+)
** +htmlEncode+
** +fieldCls++

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Display

[[components_display]]
.Ext.form.field.Display
image::images/display.png[]

==== Example
[[displayfield]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'displayfield',
        fieldLabel: 'Home',
        name: 'home_score',
        value: '10'
    }]
});
----
====

=== Fileupload

==== What it is
A file upload field which has custom styling and allows control over the button text and other features of text fields like empty text. It uses a hidden file input element behind the scenes to allow user selection of a file and to perform the actual upload during form submit.

==== Specs

===== CSS Class: +.x-field-default+ or +.x-form-readonly+

===== Ext.form.field.File
Extends from +Ext.form.field.Base+

* formfield (+.x-field-default+ or +.x-form-readonly+)
* trigger button (+.x-form-trigger-input-cell+)

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.File

[[components_file]]
.Ext.form.field.File
image::images/file.png[]

==== Example
[[fileupload]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'filefield',
        name: 'photo',
        fieldLabel: 'Photo',
        labelWidth: 50,
        msgTarget: 'side',
        allowBlank: false,
        anchor: '100%',
        buttonText: 'Select Photo...'
    }]
});
----
====

=== Numberfield

==== What it is
A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters, and numeric validation to limit the value to a range of valid numbers. The range of acceptable number values can be controlled by setting the minValue and maxValue configs, and fractional decimals can be disallowed by setting allowDecimals to false.

==== Specs

===== CSS Class: TODO

===== Ext.form.field.Number
Extends from +Ext.form.field.Base+

* +minValue+
* +manValue+

** +hideTrigger+
** +keyNavEnabled+
** +mouseWheelEnabled+

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Number

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[panels]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'numberfield',
        anchor: '100%',
        name: 'bottles',
        fieldLabel: 'Bottles of Beer',
        value: 99,
        maxValue: 99,
        minValue: 0
    }]
});
----
====

=== Spinnerfield

==== What it is
A field with a pair of up/down spinner buttons. This class is not normally instantiated directly, instead it is subclassed and the onSpinUp and onSpinDown methods are implemented to handle when the buttons are clicked. A good example of this is the Ext.form.field.Number field which uses the spinner to increment and decrement the field's value by its step config value.

==== Specs

===== CSS Class: TODO

===== Ext.form.field.Spinner
Extends from +Ext.form.field.Base+

TODO

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Spinner

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[spinner]]
.Example
====
[source, javascript]
----
Ext.define('Ext.ux.CustomSpinner', {
    extend: 'Ext.form.field.Spinner',
    alias: 'widget.customspinner',

    // override onSpinUp (using step isn't neccessary)
    onSpinUp: function() {
        var me = this;
        if (!me.readOnly) {
            var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of " Pack", defaults to zero on parse failure
            me.setValue((val + me.step) + ' Pack');
        }
    },

    // override onSpinDown
    onSpinDown: function() {
        var me = this;
        if (!me.readOnly) {
           var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of " Pack", defaults to zero on parse failure
           if (val <= me.step) {
               me.setValue('Dry!');
           } else {
               me.setValue((val - me.step) + ' Pack');
           }
        }
    }
});

Ext.create('Ext.form.FormPanel', {
    renderTo: Ext.getBody(),
    items:[{
        xtype: 'customspinner',
        fieldLabel: 'How Much Beer?',
        step: 6
    }]
});
----
====

=== Timefield

==== What it is
Provides a time input field with a time dropdown and automatic time validation.

==== Specs

===== CSS Class: TODO

===== Ext.form.field.Time
Extends from +Ext.form.field.Base+

TODO

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.Time

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[panels]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'timefield',
        name: 'in',
        fieldLabel: 'Time In',
        minValue: '6:00 AM',
        maxValue: '8:00 PM',
        increment: 30,
        anchor: '100%'
    }]
});
----
====

=== Slider

==== What it is
Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container.

==== Specs

===== CSS Class: TODO

===== Ext.slider.Single
Extends from +Ext.form.field.Base+

TODO

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.slider.Single

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[slider]]
.Example
====
[source, javascript]
----
Ext.create('Ext.slider.Single', {
    width: 200,
    value: 50,
    increment: 10,
    minValue: 0,
    maxValue: 100,
    renderTo: Ext.getBody()
});
----
====

=== Multi Slider

==== What it is
Slider with multiple thumbs which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container.

==== Specs

===== CSS Class: TODO

===== Ext.slider.Multi
Extends from +Ext.form.field.Base+

TODO

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.slider.Multi

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[multislider]]
.Example
====
[source, javascript]
----
Ext.create('Ext.slider.Multi', {
    width: 200,
    values: [25, 50, 75],
    increment: 5,
    minValue: 0,
    maxValue: 100,

    // this defaults to true, setting to false allows the thumbs to pass each other
    constrainThumbs: false,
    renderTo: Ext.getBody()
});
----
====

=== HTML Editor

==== What it is
Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be automatically hidden when needed. These are noted in the config options where appropriate.

==== Specs

===== CSS Class: TODO

===== Ext.form.field.HtmlEditor
Extends from +Ext.form.field.Base+

TODO

http://docs.sencha.com/extjs/{vers}/#!/api/Ext.form.field.HtmlEditor

[[components_todo]]
TODO
image::images/todo.png[]

==== Example
[[panels]]
.Example
====
[source, javascript]
----
Ext.create('Ext.form.HtmlEditor', {
    width: 580,
    height: 250,
    renderTo: Ext.getBody()
});
----
====