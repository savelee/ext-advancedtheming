Sharing Themes
---------------

=== Sharing Themes
==== Objectives

* Learn about global themes
* Learn about app specific themes

=== Introduction

Multiple apps can share the same theme,
since themes are located in the *packages* folder.

[[share_diagram2]]
.Multiple apps can share the same global theme.
image::resources/images/sharediagram1.png

=== App specific
Now in the previous example, it wouldn't make much sense that 
the Audio app has a Stylesheet that contains styles for the video
player.

So there must be a way to also save CSS styles on app level.
That's why each generated app has an own sass folder:
*app/sass/*.

[[share_diagram3]]
.Some styles are specific for apps, those styles shouldn't be written in a global theme.
image::resources/images/sharediagram2.png

=== Global vs App specific
Styling that is not shared between applications belongs in the application itself, not in the theme. Sencha Cmd provides an easy way to add application-level styling by following the same pattern as theme styling. The application acts as the final level in the theme hierarchy. Applications can change theme variables, and they can add their own custom variables and rules for styling the application's views.

*Global themes* are saved in the _packages/sass_ folder. +
*App specific styles* are saved in the _myapp/sass/_ folder.

=== Order of Loading.
1. First the *Global Theme* is loaded.
2. Then the *app specific styles*.

=== Global theme folderstructure
As we have seen in lecture; a Global theme has the following folderstructure.

* sass
** etc +
	contains additional utility functions or mixins +
	_all.scss_ +
** src +
	contains Sass rules and UI mixins +
	_button/Button.scss_ +
	_panel/Panel.scss_ +
	_..._ +
** var +
	contains Sass variables +
	_button/Button.scss_ +
	_panel/Panel.scss_ +
	_..._ +

The files in the _src_ and _var_ folders are organized according the folderstructure of the framework.
For example to style a  +Ext.grid.Panel+ you should create a folder and Sass file: _grid/Panel.scss_.

=== Is this structure for styles on app level the same?
No. It is different. 
Although you could change it; in the (hidden) sencha config file:
_myapp/.sencha/sencha.cfg_

=== sencha.cfg
By default when you generate an application with Sencha Cmd,
it is configured that app specific styles map to the filestructure of your application.

myapp/.sencha/sencha.cfg
[source, javascript]
----
# The root namespace to use when mapping scss resources to js classes
# in the sass/src and sass/var directories
app.sass.namespace=ExtReader
----

=== App specific folderstructure
To organize app specific Sass files, you should map your app file structure.
For example:

* sass
** etc +
	contains additional utility functions or mixins +
	_all.scss_ +
** src +
	contains Sass rules and UI mixins +
	_view/Viewport.scss_ +
	_view/Header.scss_ +
	_view/Grid.scss_ +
	_..._ +
** var +
	contains Sass variables +
	_view/Viewport.scss_ +
	_view/Header.scss_ +
	_view/Grid.scss_ +
	_..._ +

_src/view/Viewport.scss_  because of +MyApp.view.Viewport+ +
_src/view/Header.scss_ because of +MyApp.view.Header+ +
_src/view/Grid.scss_ because of +MyApp.view.Grid.scss+ 

=== Who is winning?
Ok, you've created a global theme and some app specific styles.
Let's say you set a +$base-color+ on both.
A blue $base-color in the global theme and a red $base-color in the app specific styles.

Who is winning?

=== Answer

You would think the app specific variable would win...
But this is not the case. The global theme will always win, unless you 
allow variables to be overruled.

=== !default
The +!default+ setting, can set a default value for a variable.

The +!default+ setting can allow a variable in your *global theme* to be overruled by a variable
in an app specific theme.

_It's not the same as +!important+; that's the opposite (but on CSS rules, not on Sass variables); 
When you set this, you can *not* override the CSS rule. Therefore +!important+ is a bad practice._

=== Example
See the next slides for an example of this works.

==== Create app specific styles

This app has a +MyApp.view.Viewport+ class;
so we will apply the +$base-color+ to this component on app level.

.myapp/sass/src/view/Viewport.scss
[source, javascript]
----
$base-color: red;
----

[[share_red]]
.The app specific styles are winning. (The only available styles.)
image::resources/images/share_red.png

==== Create a new theme 

Assign a new theme to your app.
Every Ext view component extends from +Ext.Component+,
so we will apply the +$base-color+ globally to this component.

.packages/mytheme/sass/src/Component.scss
[source, javascript]
----
$base-color: blue;
----

[[share_blue]]
.The global theme is winning. (In general global themes always win.)
image::resources/images/share_blue.png

==== Overwrite global vars

Change the global theme to allow variable overwrites.

.packages/mytheme/sass/etc/all.scss
[source, javascript]
----
$base-color: blue !default;
----

[[share_red2]]
.The app specific styles are winning. (Global variable allows to be overwritten.)
image::resources/images/share_red.png