=== Nesting
.A different way of identing
* Nesting improves readability
* Don't code repetitive selectors

[source, javascript]
----
.button {
	background: red;

	.inner {
		padding: 2px;
	}
}
----

[source, javascript]
----
.button { background: red; }
.button .inner { padding: 2px; }
----

==== Nesting namespaces
You can also nest namespaces:
[source, javascript]
----
.button {
	font: {
		size: 12px; 
		family: 'Helvetica';
	}
}
----

[source, javascript]
----
.button { font-size: 12px; font-family: 'Helvetica'; }
----

==== Parent selector
The +&+ stands for the (first) parent selector.
You can point to the parent selector while nesting.

[source, javascript]
----
.button {
	background: red;

	//when a red button is on a red background
	//make the button orange.
	.redbg & {
		background: orange;
	}
}
----

[source, javascript]
----
.button { background: red; }
.redbg .button { background: orange; }
----

==== Parent selector
Here's another example, while nesting deeper.

[source, javascript]
----
.button {
	background: red;

	span {
		.redbg & {
			background: orange;
		}
	}
}
----

[source, javascript]
----
.button { background: red; }
.redbg .button span { background: orange; }
----

==== Rule of thumb
Try not to nest deeper then 3 or 4 levels.
It can become hard to understand and also
when you use to many selectors, it will be hard
to overrule the style.

==== Nesting selectors
Note +&.round+. There is no space between the parent selector
and the CSS class +.round+.

Therefore this rule only applies on elements with a +button+ CSS class 
that *also* have a +round+ CSS class.

[source, javascript]
----
.button {
	background: red;
	.inner {
	 	//looks inside the scope of .button
	 	//for a class .inner
	 	text-transform: uppercase;
	}
	&.round {
		//has both classes on the same time
		border-radius: 5px;
	}
}
----

[source, javascript]
----
.button { background: red; }
.button .inner { text-transform: uppercase; }
.button.round { border-radius: 5px; }
----

==== Nesting selectors with parent selectors
Makes totally sense for pseudo selectors
such as +:hover+ or +:after+.

[source, javascript]
----
.button {
	background: red;
	&:hover {
		background: blue;
	}
}
----

[source, javascript]
----
.button { background: red; }
.button:hover { background: blue; }
----