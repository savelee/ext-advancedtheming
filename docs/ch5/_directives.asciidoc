=== Control Directives
It's is possible to write some Sass Scripting code
in your mixins.

For example if/else branching:


[source, javascript]
----
@mixin sencha-button-ui($bgcolor) {
	background-color: $bgcolor;

	//if the background is black
	//then the front color may not be black too
	@if $bgcolor == #000 {
		color: #fff;
	} @else {
		color: #000;	
	}
}

.x-btn.custom {
	@include sencha-button-ui(#000)
}
----

[source, javascript]
----
.x-btn.custom { background-color: #000; color: fff; }
----

==== Each loops
Use the +@each+ directive.

[source, javascript]
----
@mixin author-images() {
	$list: lee kevin max;
	@each $name in $list {
	    .photo-#{$name} {
	      background: url("avatars/#{$name}.png") no-repeat;
		}
	}
}

.author {
	@include author-images();
}
----

[source, javascript]
----
.author .photo-lee {
	background: url("avatar/lee.png") no-repeat;
}

.author .photo-kevin {
	background: url("avatar/kevin.png") no-repeat;
}

.author .photo-max {
	background: url("avatar/max.png") no-repeat;
}
----

==== For loops
Use the +@for+ directive.

[source, javascript]
----
@for $i from 1 through 4 {
  .column-#{$i} { width: 10px * $i; }
}
----

[source, javascript]
----
.column-1 {
  width: 10px; }
 
.column-2 {
  width: 20px; }
 
.column-3 {
  width: 30px; }
 
.column-4 {
  width: 40px; }
----

==== While loops
Use the +@while+ directive.

[source, javascript]
----
$i: 1;
$width: 60px;
 
@while $i < 4 {
  .grid-#{$i} { width: $width; }
  $width: $width + 80px;
  $i: $i + 1;
}
----

[source, javascript]
----
.grid-1 {
  width: 60px; }
 
.grid-2 {
  width: 140px; }
 
.grid-3 {
  width: 220px; }
 
.grid-4 {
  width: 300px; }
----
