<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<book lang="en">
<bookinfo>
    <title>Sencha Advanced Theming for Ext JS Course</title>
    <date>2013-07-29</date>
    <author>
        <firstname>Lee</firstname>
        <surname>Boonstra</surname>
        <email>lee.boonstra@sencha.com</email>
    </author>
    <authorinitials>LB</authorinitials>
<revhistory><revision><revnumber>0.1</revnumber><date>2013-07-29</date><authorinitials>LB</authorinitials></revision></revhistory>
</bookinfo>
<preface>
<title></title>
<itemizedlist><title>What you will learn in this course</title>
<listitem>
<simpara>
Overview of all Ext Components
</simpara>
</listitem>
<listitem>
<simpara>
Understand the Sencha layout system
</simpara>
</listitem>
<listitem>
<simpara>
Theming inheritance
</simpara>
</listitem>
<listitem>
<simpara>
Overview of the out of the box themes
</simpara>
</listitem>
<listitem>
<simpara>
Switching themes
</simpara>
</listitem>
<listitem>
<simpara>
Generating new themes
</simpara>
</listitem>
<listitem>
<simpara>
Understanding the package folder structure
</simpara>
</listitem>
<listitem>
<simpara>
Extending from Sencha themes
</simpara>
</listitem>
<listitem>
<simpara>
Working with Sass &amp; Compass
</simpara>
</listitem>
<listitem>
<simpara>
Understanding Sencha variables
</simpara>
</listitem>
<listitem>
<simpara>
Creating custom UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implementing images
</simpara>
</listitem>
<listitem>
<simpara>
Implementing fonts
</simpara>
</listitem>
<listitem>
<simpara>
Implementing icons
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to create global themes
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to create app specific themes
</simpara>
</listitem>
<listitem>
<simpara>
Build &amp; optimize themes
</simpara>
</listitem>
<listitem>
<simpara>
Theming with Sencha Architect //TODO SLIDES (lab is finished) / wait till Architect 3 is released
</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<simpara>
Extending from the Base theme //TODO SLIDES
</simpara>
</listitem>
<listitem>
<simpara>
</simpara>
</listitem>
<listitem>
<simpara>
TODO bonus lab / hackathon lab
</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<simpara>
renew objectives slide
</simpara>
<itemizedlist>
<listitem>
<simpara>
introduction Sass &amp; Compass
</simpara>
</listitem>
<listitem>
<simpara>
theming with Sencha variables
</simpara>
</listitem>
<listitem>
<simpara>
sencha app watch
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
remove all slides about creating a theme (including the lab)
</simpara>
</listitem>
<listitem>
<simpara>
Power of Sass &gt; No compass watch - &gt; should be a slide about sencha app watch (note also the installation steps needs to be maintained to install Java 7 SDK)
</simpara>
</listitem>
<listitem>
<simpara>
Yelp Theming Lab needs to be modified.
</simpara>
<itemizedlist>
<listitem>
<simpara>
create the theme directly in the app/sass/etc/all.scss file
</simpara>
</listitem>
<listitem>
<simpara>
no organization of scss files
</simpara>
</listitem>
<listitem>
<simpara>
new (corporate) design for Yelp explorer, by just setting a bunch of variables
</simpara>
</listitem>
<listitem>
<simpara>
run sencha app watch
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Promo slide about the new theming course
</simpara>
</listitem>
</itemizedlist>
</preface>
<chapter id="_overview_of_all_components">
<title>Overview of all components</title>
<section id="_objectives">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Get familiar with the Ext components
</simpara>
</listitem>
<listitem>
<simpara>
Review important component specs
</simpara>
</listitem>
<listitem>
<simpara>
Preview Ext components
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_containers">
<title>Containers</title>
<section id="_what_it_is">
<title>What it is</title>
<simpara>Containers are just a plain set of divs, they can contain items.</simpara>
</section>
<section id="_specs">
<title>Specs</title>
<section id="_css_class_literal_x_container_literal">
<title>CSS Class: <literal>.x-container</literal></title>
</section>
<section id="_literal_ext_container_container_literal">
<title><literal>Ext.container.Container</literal></title>
<simpara>Extends from <literal>Ext.Component</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>margin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>padding</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>border</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>style</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>hidden</literal> (true / false)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.container.Container">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.container.Container</ulink></simpara>
<figure id="components_containers"><title>Ext.container.Container</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/containers.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/containers.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example">
<title>Example</title>
<informalexample id="container">
<formalpara><title>Example</title><para>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.container.Container', {
    html: 'Hello World',
    width: 400,
    renderTo: Ext.getBody(),
});</programlisting>
</para></formalpara>
</informalexample>
</section>
</section>
<section id="_panels">
<title>Panels</title>
<section id="_what_it_is_2">
<title>What it is</title>
<simpara>Just a plain set of divs, like a Container (it may contain items) but with borders, headers,
dockable footers and buttons.</simpara>
</section>
<section id="_specs_2">
<title>Specs</title>
<section id="_css_class_literal_x_panel_literal">
<title>CSS Class: <literal>.x-panel</literal></title>
</section>
<section id="_literal_ext_panel_panel_literal">
<title><literal>Ext.panel.Panel</literal></title>
<simpara>Extends from <literal>Ext.container.Container</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Panel Header (<literal>.x-panel-header</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>title</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>glyph</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tools</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Panel Body (<literal>.x-panel-body</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
(optional) Docked Toolbar (<literal>.x-toolbar</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>buttons</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>margin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>padding</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>bodyPadding</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.panel.Panel">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.panel.Panel</ulink></simpara>
<figure id="components_panels"><title>Ext.panel.Panel</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/panels.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/panels.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_2">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    title : 'Panel Header',
    renderTo : Ext.getBody(),
    height : 200,
    width : 500,
    glyph: '119@Pictos',
    html: 'Panel Body',
    tools : [{
        type : 'gear',
    }],
    buttons: [{
        text: 'button'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_images">
<title>Images</title>
<section id="_what_it_is_3">
<title>What it is</title>
<simpara>An HTML image tag (optionally wrapped in div elements)
to display images.</simpara>
</section>
<section id="_specs_3">
<title>Specs</title>
<section id="_css_class_literal_x_img_literal">
<title>CSS Class: <literal>.x-img</literal></title>
</section>
<section id="_literal_ext_img_literal">
<title><literal>Ext.Img</literal></title>
<simpara>Extends from <literal>Ext.Component</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>src</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>alt</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>autoEl</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>margin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>padding</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>baseCls</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>imgCls</literal>
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Img">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Img</ulink></simpara>
<figure id="components_images"><title>Ext.Img</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/images.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/images.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_3">
<title>Example</title>
<example id="images">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.Img', {
    src: 'http://www.sencha.com/img/20110215-feat-html5.png',
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_tabpanels">
<title>TabPanels</title>
<section id="_what_it_is_4">
<title>What it is</title>
<simpara>A stack of Panels with dockable tabs for switching between views.</simpara>
</section>
<section id="_specs_4">
<title>Specs</title>
<section id="_css_class_literal_x_panel_literal_2">
<title>CSS Class: <literal>.x-panel</literal></title>
</section>
<section id="_literal_ext_tab_panel_literal">
<title><literal>Ext.tab.Panel</literal></title>
<simpara>Extends from <literal>Ext.panel.Panel</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
TabPanel Header (<literal>.x-tab-bar</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Panel Body (<literal>.x-panel</literal> or <literal>.x-tabpanel-child</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Docked Toolbar (<literal>.x-toolbar-footer</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>buttons</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tabPosition</literal> (‘top’,‘right’,‘bottom’,‘left’)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>plain</literal> (true/false)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>margin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>padding</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>bodyPadding</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.panel.Panel">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.panel.Panel</ulink></simpara>
<figure id="components_tabpanels"><title>Ext.tab.Panel</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/tabpanels.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/tabpanels.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_4">
<title>Example</title>
<example id="tabpanels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.tab.Panel', {
    renderTo : Ext.getBody(),
    height : 200,
    width : 500,
    tabPosition: 'bottom',
    //plain : true,
    items : [{
        title : 'Tab',
        html : 'Panel Body'
    }, {
        title : 'Tab',
        html : 'Panel Two'
    },
    {
        title : 'Tab',
        html : 'Panel Two'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_buttons">
<title>Buttons</title>
<section id="_what_it_is_5">
<title>What it is</title>
<simpara>Listen to user events, click, double click, toggle&#8230;</simpara>
</section>
<section id="_specs_5">
<title>Specs</title>
<section id="_css_class_literal_x_btn_literal">
<title>CSS Class: <literal>.x-btn</literal></title>
</section>
<section id="_literal_ext_button_button_literal">
<title><literal>Ext.button.Button</literal></title>
<simpara>Extends from <literal>Ext.Component</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Button (<literal>.x-btn</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Inner button (<literal>.x-btn-inner</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>glyph</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>menu</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>scale</literal> (‘small’,‘medium’,‘large’)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.button.Button">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.button.Button</ulink></simpara>
<figure id="components_buttons"><title>Ext.button.Button</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/buttons.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/buttons.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_5">
<title>Example</title>
<informalexample id="buttons">
<formalpara><title>Example</title><para>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.button.Button', {
    handler: function() {
       alert("BAMM!");
    },
    renderTo: Ext.getBody(),
    text : 'Beatles',
    menu : {
       items : [{
          text : 'John'
       }, {
          text : 'Paul'
       }, {
          text : '...'
       }]
    }
});</programlisting>
</para></formalpara>
</informalexample>
</section>
</section>
<section id="_split_buttons">
<title>Split Buttons</title>
<section id="_what_it_is_6">
<title>What it is</title>
<simpara>Like Buttons, but have two functionalities.
A clickable button and a clickable arrow
that pops out a menu.</simpara>
</section>
<section id="_specs_6">
<title>Specs</title>
<section id="_css_class_literal_x_btn_gt_x_btn_split_literal">
<title>CSS Class: <literal>.x-btn &gt; .x-btn-split</literal></title>
</section>
<section id="_literal_ext_button_split_literal">
<title><literal>Ext.button.Split</literal></title>
<simpara>Extends from <literal>Ext.Component</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Split Button (<literal>.x-btn &gt; .x-btn-split</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Inner button (<literal>.x-btn-inner</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>glyph</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>menu</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>scale</literal> (‘small’,‘medium’,‘large’)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.button.Split">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.button.Split</ulink></simpara>
<figure id="components_splitbuttons"><title>Ext.button.Split</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/buttonssplit.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/buttonssplit.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_6">
<title>Example</title>
<informalexample id="splitbuttons">
<formalpara><title>Example</title><para>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.button.Split', {
    text: 'Choose an Action',
    width: 120,
    handler: function(b) {
        alert(b.sound);
    },
    menu: {
        defaults: {
            handler: function(b) {
                var parent = b.up('splitbutton');
                parent.setText(b.text);
                parent.sound = b.sound;
            }
        },
        items: [{
            text: 'Sing',
            sound: 'la la la'
        }, {
            text: 'Play Guitar',
            sound: 'strum'
        }, {
            text: 'Compose',
            sound: 'scribble'
        }]
    },
    renderTo: Ext.getBody(),
});</programlisting>
</para></formalpara>
</informalexample>
</section>
</section>
<section id="_toolbars">
<title>Toolbars</title>
<section id="_what_it_is_7">
<title>What it is</title>
<simpara>Dockable bars, can contain things,
buttons (default), form fields, text strings&#8230;</simpara>
</section>
<section id="_specs_7">
<title>Specs</title>
<section id="_css_class_literal_x_toolbar_literal">
<title>CSS Class: <literal>x-toolbar</literal></title>
</section>
<section id="_literal_ext_toolbar_toolbar_literal">
<title><literal>Ext.toolbar.Toolbar</literal></title>
<simpara>Extends from <literal>Ext.container.Container</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Toolbar item (.x-toolbar-item / .x-toolbar-btn)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>dockedItems</literal> &gt; <literal>dock</literal> (‘top’,‘right’,‘bottom’,‘left’)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.toolbar.Toolbar">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.toolbar.Toolbar</ulink></simpara>
<formalpara id="components_toolbars"><title>Ext.toolbar.Toolbar</title><para>///images:toolbars.png[scale="75"]</para></formalpara>
</section>
</section>
<section id="_example_7">
<title>Example</title>
<example id="toolbars">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    title : 'My Panel',

    dockedItems : [ {
        xtype : 'toolbar',
        dock : 'bottom',
        items : [ {
            text : 'Toolbar Button'
        }]
    }],

    html: 'Panel Body',
    width : 300,
    renderTo : Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_windows">
<title>Windows</title>
<section id="_what_it_is_8">
<title>What it is</title>
<simpara>Panels that are floatable, draggable, resizable</simpara>
</section>
<section id="_specs_8">
<title>Specs</title>
<section id="_css_class_literal_x_window_literal">
<title>CSS Class: <literal>.x-window</literal></title>
</section>
<section id="_literal_ext_window_window_literal">
<title><literal>Ext.window.Window</literal></title>
<simpara>Extends from <literal>Ext.panel.Panel</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Window Header (<literal>x-window-header</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>title</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>glyph</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tools</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Window Body (<literal>x-window-body</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>icon</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>minWidth</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>maxWidth</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>x</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>y</literal>
</simpara>
</listitem>
<listitem>
<simpara>
+modal*
</simpara>
</listitem>
<listitem>
<simpara>
<literal>draggable</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>resizable</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.Window">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.Window</ulink></simpara>
<figure id="components_windows"><title>Ext.window.Window</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/windows.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/windows.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_8">
<title>Example</title>
<example id="windows">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.window.Window', {
    title: 'Window',
    autoShow: 'true',
    height: 300,
    width: 300,
    x: 10,
    y: 10
});</programlisting>
</example>
</section>
</section>
<section id="_messageboxes">
<title>Messageboxes</title>
<section id="_what_it_is_9">
<title>What it is</title>
<simpara>Windows, async, that display alert messages,
prompt and confirmation input fields and buttons
or progressbar / wait widgets.</simpara>
</section>
<section id="_specs_9">
<title>Specs</title>
<section id="_css_class_literal_x_message_box_literal">
<title>CSS Class: <literal>.x-message-box</literal></title>
<simpara>Extends from <literal>Ext.window.Window</literal></simpara>
</section>
<section id="_ext_window_messagebox">
<title>Ext.window.MessageBox</title>
<itemizedlist>
<listitem>
<simpara>
<literal>icon</literal>
</simpara>
</listitem>
</itemizedlist>
<figure id="components_alert"><title>Ext.window.MessageBox.alert()</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/alert.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/alert.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox</ulink></simpara>
</section>
</section>
<section id="_example_9">
<title>Example</title>
<example id="messagebox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.Msg.alert('Widget Updated', 'The widget was updated successfully.');</programlisting>
</example>
</section>
<section id="_specs_10">
<title>Specs</title>
<section id="_css_class_literal_x_message_box_literal_2">
<title>CSS Class: <literal>.x-message-box</literal></title>
</section>
<section id="_ext_window_messagebox_confirm">
<title>Ext.window.MessageBox.confirm()</title>
<itemizedlist>
<listitem>
<simpara>
<literal>icon</literal>
</simpara>
</listitem>
</itemizedlist>
<figure id="components_confirm"><title>Ext.window.MessageBox.confirm()</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/confirm.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/confirm.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox</ulink></simpara>
</section>
</section>
<section id="_example_10">
<title>Example</title>
<example id="messagebox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.Msg.confirm('Are you sure?',
   'Do you want to delete this widget?', function(btn, text){
   if(btn === 'yes'){
      Ext.Msg.alert('Deleted', 'The widget has been deleted');
   }
   else{
      Ext.Msg.alert('Not Deleted', 'The widget was not deleted');
   }
});</programlisting>
</example>
</section>
<section id="_specs_11">
<title>Specs</title>
<section id="_css_class_literal_x_message_box_literal_3">
<title>CSS Class: <literal>.x-message-box</literal></title>
</section>
<section id="_ext_window_messagebox_prompt">
<title>Ext.window.MessageBox.prompt()</title>
<itemizedlist>
<listitem>
<simpara>
<literal>icons</literal>
</simpara>
</listitem>
</itemizedlist>
<figure id="components_prompt"><title>Ext.window.MessageBox.prompt()</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/prompt.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/prompt.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox</ulink></simpara>
</section>
</section>
<section id="_example_11">
<title>Example</title>
<example id="messagebox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){
    var name = (btn === 'ok' &amp;&amp; text.length) ? text : 'anonymous user';
    Ext.Msg.alert('Hello', 'Hello, ' + name + '!');
});</programlisting>
</example>
</section>
<section id="_specs_12">
<title>Specs</title>
<section id="_css_class_literal_x_message_box_literal_4">
<title>CSS Class: <literal>.x-message-box</literal></title>
</section>
<section id="_ext_window_messagebox_progress">
<title>Ext.window.MessageBox.progress()</title>
<itemizedlist>
<listitem>
<simpara>
<literal>icon</literal>
</simpara>
</listitem>
</itemizedlist>
<figure id="components_progess"><title>Ext.window.MessageBox.progress()</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/progress.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/progress.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox</ulink></simpara>
</section>
</section>
<section id="_example_12">
<title>Example</title>
<example id="messagebox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.Msg.progress('Processing', 'Please wait while we process your application...');

var update = function(percent){
    Ext.Msg.updateProgress(percent, Ext.util.Format.number((percent*100), '0% complete'));
}
Ext.defer(update, 1000, null, [ .25]);
Ext.defer(update, 2000, null, [ .50]);
Ext.defer(update, 3000, null, [ .75]);
Ext.defer(update, 4000, null, [1.00]);</programlisting>
</example>
</section>
<section id="_specs_13">
<title>Specs</title>
<section id="_css_class_literal_x_message_box_literal_5">
<title>CSS Class: <literal>.x-message-box</literal></title>
</section>
<section id="_ext_window_messagebox_wait">
<title>Ext.window.MessageBox.wait()</title>
<itemizedlist>
<listitem>
<simpara>
<literal>icon</literal>
</simpara>
</listitem>
</itemizedlist>
<figure id="components_progess"><title>Ext.window.MessageBox.progress()</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/progress.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/progress.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.window.MessageBox</ulink></simpara>
</section>
</section>
<section id="_example_13">
<title>Example</title>
<example id="messagebox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">var m = Ext.Msg.wait("Please wait while we process your application...", "Processing", {
   interval: 300, //bar will move fast!
   duration: 3000,
   increment: 10,
   text: 'Updating...',

   fn: function(){
      m.hide();
   }
});</programlisting>
</example>
</section>
</section>
<section id="_grids">
<title>Grids</title>
<section id="_what_it_is_10">
<title>What it is</title>
<simpara>For displaying a lot of (sortable) data.
Like Microsoft Excel sheets, but all cells have the width of the column.
This is because a grid in the DOM is in fact an HTML table.</simpara>
</section>
<section id="_specs_14">
<title>Specs</title>
<section id="_css_class_literal_x_grid_literal">
<title>CSS Class: <literal>.x-grid</literal></title>
</section>
<section id="_literal_ext_grid_panel_literal">
<title><literal>Ext.grid.Panel</literal></title>
<simpara>Extends from <literal>Ext.panel.Panel</literal> &amp; <literal>Ext.panel.Table</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Grid Header (<literal>.x-grid-header</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Grid Body (<literal>.x-grid-body</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>rowLines</literal> (true / false)
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Grid Column
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>editor</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>emptyCellText</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>lockable</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tooltip</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>text</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tdCls</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Grouping
</simpara>
</listitem>
<listitem>
<simpara>
Summary
</simpara>
</listitem>
<listitem>
<simpara>
Paging
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.Panel">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.Panel</ulink></simpara>
<figure id="components_grids"><title>Ext.grid.Panel</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/grids.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/grids.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_14">
<title>Example</title>
<example id="grids">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">var store = Ext.create('Ext.data.Store', {
   fields:[
     {name: 'framework', type: 'string'},
     {name: 'rocks', type: 'boolean'}
   ],
   data: [
     { 'framework': "Ext JS 4", 'rocks': true  },
     { 'framework': "Sencha Touch", 'rocks': true  },
     { 'framework': "Ext GXT", 'rocks': true  },
     { 'framework': "Other Guys", 'rocks': false }
   ]
});

Ext.create('Ext.grid.Panel', {
    store: store,
    columns: [
        { text: 'Framework',  dataIndex: 'framework', flex: 1 },
        {

            xtype: 'booleancolumn',
            trueText: 'Yes',
            falseText: 'No',
            text: 'Rocks',
            dataIndex: 'rocks'
        }
    ],
    title: 'Frameworks',
    height: 200,
    width: 400,
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_trees">
<title>Trees</title>
<section id="_what_it_is_11">
<title>What it is</title>
<simpara>Like MS Windows Explorer or Mac OS X Finder,
a Panel with a list of nodes and folders that
can fold and unfold.</simpara>
</section>
<section id="_specs_15">
<title>Specs</title>
<section id="_css_class_literal_x_tree_panel_literal">
<title>CSS Class: <literal>.x-tree-panel</literal></title>
</section>
<section id="_literal_ext_tree_panel_literal">
<title><literal>Ext.tree.Panel</literal></title>
<simpara>Extends from <literal>Ext.panel.Panel</literal> &amp; <literal>Ext.panel.Table</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Grid Header (<literal>.x-grid-header</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Tree View (<literal>.x-tree-view</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
Grid Cell (<literal>.x-grid.cell</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>lines</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>useArrows</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>animate</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.tree.Panel">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.tree.Panel</ulink></simpara>
<figure id="components_treepanels"><title>Ext.tree.Panel</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/trees.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/trees.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_15">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">var store = Ext.create('Ext.data.TreeStore', {
    root: {
        expanded: true,
        children: [
            { text: "detention", leaf: true },
            { text: "homework", expanded: true, children: [
                { text: "book report", leaf: true },
                { text: "algebra", leaf: true}
            ] },
            { text: "buy lottery tickets", leaf: true }
        ]
    }
});

Ext.create('Ext.tree.Panel', {
    title: 'Simple Tree',
    width: 200,
    height: 150,
    store: store,
    rootVisible: false,
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_formpanel">
<title>FormPanel</title>
<section id="_what_it_is_12">
<title>What it is</title>
<simpara>A panel that is required to hold form fields. Under the covers it has
several mechanisms for sending and validating forms.</simpara>
</section>
<section id="_specs_16">
<title>Specs</title>
<section id="_css_class_literal_x_panel_literal_3">
<title>CSS Class: <literal>.x-panel</literal></title>
</section>
<section id="_literal_ext_form_panel_literal">
<title><literal>Ext.form.Panel</literal></title>
<simpara>Extends from <literal>Ext.panel.Panel</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
Panel Header (<literal>.x-panel-header</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>title</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>glyph</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tools</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Panel Body (<literal>.x-panel-body</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
(optional) Docked Toolbar (<literal>.x-toolbar</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>waitTitle</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>buttons</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>height</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>width</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>margin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>padding</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>bodyPadding</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.Panel">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.Panel</ulink></simpara>
<figure id="components_formpanels"><title>Ext.form.Panel</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/panels.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/panels.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_16">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    title: 'Simple Form',
    bodyPadding: 5,
    width: 350,

    // The form will submit an AJAX request to this URL when submitted
    url: 'save-form.php',

    // Fields will be arranged vertically, stretched to full width
    layout: 'anchor',
    defaults: {
        anchor: '100%'
    },

    // The fields
    defaultType: 'textfield',
    items: [{
        fieldLabel: 'First Name',
        name: 'first',
        allowBlank: false
    },{
        fieldLabel: 'Last Name',
        name: 'last',
        allowBlank: false
    }],

    // Reset and Submit buttons
    buttons: [{
        text: 'Reset',
        handler: function() {
            this.up('form').getForm().reset();
        }
    }, {
        text: 'Submit',
        formBind: true, //only enabled once the form is valid
        disabled: true,
        handler: function() {
            var form = this.up('form').getForm();
            if (form.isValid()) {
                form.submit({
                    success: function(form, action) {
                       Ext.Msg.alert('Success', action.result.msg);
                    },
                    failure: function(form, action) {
                        Ext.Msg.alert('Failed', action.result.msg);
                    }
                });
            }
        }
    }],
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_textfield">
<title>Textfield</title>
<section id="_what_it_is_13">
<title>What it is</title>
<simpara>A plain form field for entering text.</simpara>
<simpara>But there is one important difference.
A (text) field in Ext JS is the input field plus the label all together.</simpara>
<simpara>Under the hood all fields are little html tables.
Where the label is the left <literal>&lt;td&gt;</literal>.
The field is the 2nd <literal>&lt;td&gt;</literal>.
Optionally the 3rd <literal>&lt;td&gt;</literal> contains a trigger button.</simpara>
</section>
<section id="_specs_17">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_type_text_literal">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-type-text</literal></title>
</section>
<section id="_literal_ext_form_field_text_literal">
<title><literal>Ext.form.field.Text</literal></title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-type-text</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
error (<literal>.x-form-invalid</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>size</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>grow</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>growMin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>growMax</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>emptyText</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>minLength</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>maxLength</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Text-cfg-blankText">http://http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Text-cfg-blankText</ulink></simpara>
<figure id="components_textfield"><title>Ext.form.field.Text</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/textfield.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/textfield.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_17">
<title>Example</title>
<example id="textfield">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    title: 'Contact Info',
    width: 300,
    bodyPadding: 10,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield',
        name: 'name',
        emptyText: "please enter name",
        fieldLabel: 'Name',
        allowBlank: false  // requires a non-empty value
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_textarea">
<title>Textarea</title>
<section id="_what_it_is_14">
<title>What it is</title>
<simpara>A text field for entering multiple rows of text.
In addition, it supports automatically growing the height of the textarea to fit its content.</simpara>
</section>
<section id="_specs_18">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_type_text_literal_2">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-type-text</literal></title>
</section>
<section id="_ext_form_field_textarea">
<title>Ext.form.field.TextArea</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-type-text</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
error (<literal>.x-form-invalid</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>rows</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>cols</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>growMin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>growMax</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.TextArea">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.TextArea</ulink></simpara>
<figure id="components_textarea"><title>Ext.form.field.TextArea</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/textarea.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/textarea.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_18">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.FormPanel', {
    title      : 'Sample TextArea',
    width      : 400,
    bodyPadding: 10,
    renderTo   : Ext.getBody(),
    items: [{
        xtype     : 'textareafield',
        grow      : true,
        name      : 'message',
        fieldLabel: 'Message',
        anchor    : '100%'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_combobox">
<title>Combobox</title>
<section id="_what_it_is_15">
<title>What it is</title>
<simpara>A ComboBox control (is like a select dropdown) with support for autocomplete, remote loading, and many other features.</simpara>
<simpara>A ComboBox is like a combination of a traditional HTML text &lt;input&gt; field and a &lt;select&gt; field; the user is able to type freely into the field, and/or pick values from a dropdown selection list. The user can input any value by default, even if it does not appear in the selection list.</simpara>
</section>
<section id="_specs_19">
<title>Specs</title>
<section id="_css_class_literal_x_form_trigger_input_cell_literal_field_literal_x_trigger_cell_literal_trigger_and_literal_x_boudlist_literal_list">
<title>CSS Class: <literal>.x-form-trigger-input-cell</literal> (field), <literal>.x-trigger-cell</literal> (trigger) and <literal>.x-boudlist</literal> (list)</title>
</section>
<section id="_ext_form_field_combobox">
<title>Ext.form.field.ComboBox</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-type-text</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
error (<literal>.x-form-invalid</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>growToLongestValue</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
boundlist (<literal>.x-boundlist</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>multiSelect</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>typeAhead</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>typeAheadDelay</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
arrow trigger (<literal>.x-form-arrow-trigger</literal>)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.ComboBox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.ComboBox</ulink></simpara>
<figure id="components_combobox"><title>Ext.form.field.ComboBox</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/combobox.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/combobox.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_19">
<title>Example</title>
<example id="combo">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">// The data store containing the list of states
var states = Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data : [
        {"abbr":"AL", "name":"Alabama"},
        {"abbr":"AK", "name":"Alaska"},
        {"abbr":"AZ", "name":"Arizona"}
        //...
    ]
});

// Create the combo box, attached to the states data store
Ext.create('Ext.form.ComboBox', {
    fieldLabel: 'Choose State',
    store: states,
    queryMode: 'local',
    displayField: 'name',
    valueField: 'abbr',
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_checkbox">
<title>Checkbox</title>
<section id="_what_it_is_16">
<title>What it is</title>
<simpara>Single checkbox. To check one or more option boxes.</simpara>
</section>
<section id="_specs_20">
<title>Specs</title>
<section id="_css_class_literal_x_form_type_checkbox_literal">
<title>CSS Class: <literal>.x-form-type-checkbox</literal></title>
</section>
<section id="_ext_form_field_checkbox">
<title>Ext.form.field.Checkbox</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
checkbox (<literal>.x-form-type-checkbox</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
checkbox wrapper (<literal>.x-form-cb-wrap</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
checkbox (<literal>.x-form-cb</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
checked
</simpara>
</listitem>
<listitem>
<simpara>
checkedCls
</simpara>
</listitem>
<listitem>
<simpara>
fieldCls
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
label (<literal>.x-form-cb-label</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
afterBoxLabelTextTpl
</simpara>
</listitem>
<listitem>
<simpara>
beforeBoxLabelTextTpl
</simpara>
</listitem>
<listitem>
<simpara>
boxLabel
</simpara>
</listitem>
<listitem>
<simpara>
boxLabelAlign
</simpara>
</listitem>
<listitem>
<simpara>
boxLabelCls
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Checkbox">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Checkbox</ulink></simpara>
<figure id="components_checkbox"><title>Ext.form.field.Checkbox</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/checkbox.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/checkbox.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_20">
<title>Example</title>
<example id="checkbox">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    items: [
        {
            xtype: 'fieldcontainer',
            fieldLabel: 'Toppings',
            defaultType: 'checkboxfield',
            items: [
                {
                    boxLabel  : 'Anchovies',
                    name      : 'topping',
                    inputValue: '1',
                    id        : 'checkbox1'
                }, {
                    boxLabel  : 'Artichoke Hearts',
                    name      : 'topping',
                    inputValue: '2',
                    checked   : true,
                    id        : 'checkbox2'
                }, {
                    boxLabel  : 'Bacon',
                    name      : 'topping',
                    inputValue: '3',
                    id        : 'checkbox3'
                }
            ]
        }
    ],
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_radio">
<title>Radio</title>
<section id="_what_it_is_17">
<title>What it is</title>
<simpara>Single radio field. Similar to checkbox but pick only one option field.</simpara>
</section>
<section id="_specs_21">
<title>Specs</title>
<section id="_css_class_literal_x_form_type_radio_literal">
<title>CSS Class: <literal>.x-form-type-radio</literal></title>
</section>
<section id="_ext_form_field_radio">
<title>Ext.form.field.Radio</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal> and <literal>Ext.form.field.CheckBox</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
checkbox (<literal>.x-form-type-radio</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
checkbox wrapper (<literal>.x-form-cb-wrap</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
checkbox (<literal>.x-form-cb</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
checked
</simpara>
</listitem>
<listitem>
<simpara>
checkedCls
</simpara>
</listitem>
<listitem>
<simpara>
fieldCls
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
label (<literal>.x-form-cb-label</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
afterBoxLabelTextTpl
</simpara>
</listitem>
<listitem>
<simpara>
beforeBoxLabelTextTpl
</simpara>
</listitem>
<listitem>
<simpara>
boxLabel
</simpara>
</listitem>
<listitem>
<simpara>
boxLabelAlign
</simpara>
</listitem>
<listitem>
<simpara>
boxLabelCls
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Radio">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Radio</ulink></simpara>
<figure id="components_radio"><title>Ext.form.field.Radio</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/radio.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/radio.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_21">
<title>Example</title>
<example id="radio">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    title      : 'Order Form',
    width      : 300,
    bodyPadding: 10,
    renderTo   : Ext.getBody(),
    items: [
        {
            xtype      : 'fieldcontainer',
            fieldLabel : 'Size',
            defaultType: 'radiofield',
            defaults: {
                flex: 1
            },
            layout: 'hbox',
            items: [
                {
                    boxLabel  : 'M',
                    name      : 'size',
                    inputValue: 'm',
                    id        : 'radio1'
                }, {
                    boxLabel  : 'L',
                    name      : 'size',
                    inputValue: 'l',
                    id        : 'radio2'
                }, {
                    boxLabel  : 'XL',
                    name      : 'size',
                    inputValue: 'xl',
                    id        : 'radio3'
                }
            ]
        }

    ]
});</programlisting>
</example>
</section>
</section>
<section id="_datefield">
<title>Datefield</title>
<section id="_what_it_is_18">
<title>What it is</title>
<simpara>Provides a date input field with a date picker dropdown and automatic date validation.</simpara>
</section>
<section id="_specs_22">
<title>Specs</title>
<section id="_css_class_literal_x_form_trigger_input_cell_literal_field_literal_x_trigger_cell_literal_trigger_and_literal_x_datepicker_literal_calendar">
<title>CSS Class: <literal>.x-form-trigger-input-cell</literal> (field), <literal>.x-trigger-cell</literal> (trigger) and <literal>.x-datepicker</literal> (calendar)</title>
</section>
<section id="_ext_form_field_date">
<title>Ext.form.field.Date</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-type-text</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
date trigger (<literal>.x-form-date-trigger</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
calendar (<literal>.x-datapicker</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>showToday</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>startDay</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>matchFieldWidth</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>altFormats</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>disabledDates</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>disabledDays</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>format</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Date">http://http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Date</ulink></simpara>
<figure id="components_date"><title>Ext.form.field.Date</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/date.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/date.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_22">
<title>Example</title>
<example id="datefield">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    width: 300,
    bodyPadding: 10,
    title: 'Dates',
    items: [{
        xtype: 'datefield',
        anchor: '100%',
        fieldLabel: 'To',
        name: 'to_date',
        value: new Date()  // defaults to today
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_displayfield">
<title>Displayfield</title>
<section id="_what_it_is_19">
<title>What it is</title>
<simpara>A display-only text field which is not validated and not submitted. This is useful for when you want to display a value from a form&#8217;s loaded data but do not want to allow the user to edit or submit that value.</simpara>
</section>
<section id="_specs_23">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_readonly_literal">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-readonly</literal></title>
</section>
<section id="_ext_form_field_display">
<title>Ext.form.field.Display</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-readonly</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>htmlEncode</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>fieldCls</literal>+
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Display">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Display</ulink></simpara>
<figure id="components_display"><title>Ext.form.field.Display</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/display.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/display.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_23">
<title>Example</title>
<example id="displayfield">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'displayfield',
        fieldLabel: 'Home',
        name: 'home_score',
        value: '10'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_fileupload">
<title>Fileupload</title>
<section id="_what_it_is_20">
<title>What it is</title>
<simpara>A file upload field which has custom styling and allows control over the button text and other features of text fields like empty text. It uses a hidden file input element behind the scenes to allow user selection of a file and to perform the actual upload during form submit.</simpara>
</section>
<section id="_specs_24">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_readonly_literal_2">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-readonly</literal></title>
</section>
<section id="_ext_form_field_file">
<title>Ext.form.field.File</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-readonly</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
trigger button (<literal>.x-form-trigger-input-cell</literal>)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.File">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.File</ulink></simpara>
<figure id="components_file"><title>Ext.form.field.File</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/file.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/file.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_24">
<title>Example</title>
<example id="fileupload">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'filefield',
        name: 'photo',
        fieldLabel: 'Photo',
        labelWidth: 50,
        msgTarget: 'side',
        allowBlank: false,
        anchor: '100%',
        buttonText: 'Select Photo...'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_numberfield">
<title>Numberfield</title>
<section id="_what_it_is_21">
<title>What it is</title>
<simpara>A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters, and numeric validation to limit the value to a range of valid numbers. The range of acceptable number values can be controlled by setting the minValue and maxValue configs, and fractional decimals can be disallowed by setting allowDecimals to false.</simpara>
</section>
<section id="_specs_25">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_type_text_literal_3">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-type-text</literal></title>
</section>
<section id="_ext_form_field_number">
<title>Ext.form.field.Number</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-readonly</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>minValue</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>maxValue</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
trigger button (<literal>.x-form-trigger</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>hideTrigger</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>keyNavEnabled</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>mouseWheelEnabled</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Number">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Number</ulink></simpara>
<figure id="components_number"><title>Ext.form.field.Number</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/number.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/number.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_25">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'numberfield',
        anchor: '100%',
        name: 'bottles',
        fieldLabel: 'Bottles of Beer',
        value: 99,
        maxValue: 99,
        minValue: 0
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_spinnerfield">
<title>Spinnerfield</title>
<section id="_what_it_is_22">
<title>What it is</title>
<simpara>A field with a pair of up/down spinner buttons. This class is not normally instantiated directly, instead it is subclassed and the onSpinUp and onSpinDown methods are implemented to handle when the buttons are clicked. A good example of this is the Ext.form.field.Number field which uses the spinner to increment and decrement the field&#8217;s value by its step config value.</simpara>
</section>
<section id="_specs_26">
<title>Specs</title>
<section id="_css_class_literal_x_field_default_literal_or_literal_x_form_type_text_literal_4">
<title>CSS Class: <literal>.x-field-default</literal> or <literal>.x-form-type-text</literal></title>
</section>
<section id="_ext_form_field_spinner">
<title>Ext.form.field.Spinner</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-readonly</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>spinDownEnabled</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>spinUpEnabled</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
trigger button (<literal>.x-form-trigger</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>hideTrigger</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>keyNavEnabled</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>mouseWheelEnabled</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Spinner">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Spinner</ulink></simpara>
<figure id="components_spinner"><title>Ext.form.field.Spinner</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/spinner.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/spinner.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_26">
<title>Example</title>
<example id="spinner">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.define('Ext.ux.CustomSpinner', {
    extend: 'Ext.form.field.Spinner',
    alias: 'widget.customspinner',

    // override onSpinUp (using step isn't neccessary)
    onSpinUp: function() {
        var me = this;
        if (!me.readOnly) {
            var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of " Pack", defaults to zero on parse failure
            me.setValue((val + me.step) + ' Pack');
        }
    },

    // override onSpinDown
    onSpinDown: function() {
        var me = this;
        if (!me.readOnly) {
           var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of " Pack", defaults to zero on parse failure
           if (val &lt;= me.step) {
               me.setValue('Dry!');
           } else {
               me.setValue((val - me.step) + ' Pack');
           }
        }
    }
});

Ext.create('Ext.form.FormPanel', {
    renderTo: Ext.getBody(),
    items:[{
        xtype: 'customspinner',
        fieldLabel: 'How Much Beer?',
        step: 6
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_timefield">
<title>Timefield</title>
<section id="_what_it_is_23">
<title>What it is</title>
<simpara>Provides a time input field with a time dropdown and automatic time validation.</simpara>
</section>
<section id="_specs_27">
<title>Specs</title>
<section id="_css_class_literal_x_form_trigger_input_cell_literal_field_literal_x_trigger_cell_literal_trigger_and_literal_x_boudlist_literal_list_2">
<title>CSS Class: <literal>.x-form-trigger-input-cell</literal> (field), <literal>.x-trigger-cell</literal> (trigger) and <literal>.x-boudlist</literal> (list)</title>
</section>
<section id="_ext_form_field_time">
<title>Ext.form.field.Time</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
formfield (<literal>.x-field-default</literal> or <literal>.x-form-type-text</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
boundlist (<literal>.x-boundlist</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>increment</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>format</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>pickerMaxHeight</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
arrow trigger (<literal>.x-form-arrow-trigger</literal>)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Time">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.Time</ulink></simpara>
<figure id="components_combobox"><title>Ext.form.field.ComboBox</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/combobox.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/combobox.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_27">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'timefield',
        name: 'in',
        fieldLabel: 'Time In',
        minValue: '6:00 AM',
        maxValue: '8:00 PM',
        increment: 30,
        anchor: '100%'
    }]
});</programlisting>
</example>
</section>
</section>
<section id="_slider">
<title>Slider</title>
<section id="_what_it_is_24">
<title>What it is</title>
<simpara>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container.</simpara>
</section>
<section id="_specs_28">
<title>Specs</title>
<section id="_css_class_literal_x_slider_literal">
<title>CSS Class: <literal>.x-slider</literal></title>
</section>
<section id="_ext_slider_single">
<title>Ext.slider.Single</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
slider (<literal>.x-slider</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
slider thumb (<literal>.x-slider-thumb</literal>)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.slider.Single">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.slider.Single</ulink></simpara>
<figure id="components_sl"><title>Ext.slider.Slider</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/slider.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/slider.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_28">
<title>Example</title>
<example id="slider">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.slider.Single', {
    width: 200,
    value: 50,
    increment: 10,
    minValue: 0,
    maxValue: 100,
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_multi_slider">
<title>Multi Slider</title>
<section id="_what_it_is_25">
<title>What it is</title>
<simpara>Slider with multiple thumbs which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container.</simpara>
</section>
<section id="_specs_29">
<title>Specs</title>
<section id="_css_class_ext_slider_multi">
<title>CSS Class: Ext.slider.Multi</title>
</section>
<section id="_ext_slider_multi">
<title>Ext.slider.Multi</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
slider (<literal>.x-slider</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
slider thumb (<literal>.x-slider-thumb</literal>)
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.slider.Multi">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.slider.Multi</ulink></simpara>
<figure id="components_multi"><title>Ext.slider.Multi</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/multi.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/multi.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_example_29">
<title>Example</title>
<example id="multislider">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.slider.Multi', {
    width: 200,
    values: [25, 50, 75],
    increment: 5,
    minValue: 0,
    maxValue: 100,

    // this defaults to true, setting to false allows the thumbs to pass each other
    constrainThumbs: false,
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_html_editor">
<title>HTML Editor</title>
<section id="_what_it_is_26">
<title>What it is</title>
<simpara>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be automatically hidden when needed. These are noted in the config options where appropriate.</simpara>
</section>
<section id="_specs_30">
<title>Specs</title>
<section id="_css_class_literal_x_html_editor_container_literal">
<title>CSS Class: <literal>.x-html-editor-container</literal></title>
</section>
<section id="_ext_form_field_htmleditor">
<title>Ext.form.field.HtmlEditor</title>
<simpara>Extends from <literal>Ext.form.field.Base</literal></simpara>
<itemizedlist>
<listitem>
<simpara>
editor (<literal>x-html-editor-container</literal>)
</simpara>
<itemizedlist>
<listitem>
<simpara>
enableAlignments
</simpara>
</listitem>
<listitem>
<simpara>
enableColors
</simpara>
</listitem>
<listitem>
<simpara>
enableFont
</simpara>
</listitem>
<listitem>
<simpara>
enableFontSize
</simpara>
</listitem>
<listitem>
<simpara>
enableFormat
</simpara>
</listitem>
<listitem>
<simpara>
enableLinks
</simpara>
</listitem>
<listitem>
<simpara>
enableLists
</simpara>
</listitem>
<listitem>
<simpara>
enableSourceEdit
</simpara>
</listitem>
<listitem>
<simpara>
fontFamilies
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.HtmlEditor">http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.form.field.HtmlEditor</ulink></simpara>
</section>
</section>
<section id="_example_30">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.HtmlEditor', {
    width: 580,
    height: 250,
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
</chapter>
<chapter id="_overview_layout_system">
<title>Overview layout system</title>
<section id="_objectives_2">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Get familiar with the Ext layout system
</simpara>
</listitem>
<listitem>
<simpara>
Review important layout specs
</simpara>
</listitem>
<listitem>
<simpara>
Preview Ext layouts
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_hbox">
<title>Hbox</title>
<section id="_what_8217_s_it">
<title>What&#8217;s it?</title>
<simpara>A light weight horizontal box layout.
This layout optionally divides available horizontal space between child items containing a numeric flex configuration.</simpara>
</section>
<section id="_specs_31">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.HBox</literal> (<literal>layout:hbox</literal>)</simpara>
<figure id="layouts_hbox"><title>Horizontal Box layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/hbox.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/hbox.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.HBox">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.HBox</ulink></simpara>
</section>
<section id="_example_31">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : {
        type: 'hbox',
        align: 'middle',
        pack : 'end'
    },

    defaults: {
        style: 'background: red',
        margin: 5,
        xtype: 'container',
        width: 50,
        height: 50
    },
    items : [ {
        html : 'Panel One'
    }, {
        html : 'Panel Two'
    }, {
        html : 'Panel Three'
    } ],

    height : 300,
    width : 500,
    renderTo : Ext.getBody()
});</programlisting>
</example>
</section>
<section id="_height_and_width">
<title>Height and Width</title>
<simpara>It&#8217;s actually not so common to set height and widths on panels.
Because of different screensizes, you rather have your layouts flexible.</simpara>
</section>
<section id="_flex">
<title>Flex</title>
<simpara>To create dynamic (flexible) widths.</simpara>
<simpara>Let’s say, if you have a container.  And the left panel takes up 25% height. And the right panel takes up 75%. (that’s together 100%).
In this case, we could say 25% is one 1/4 And 75% is 3/4.
So 1 + 3 = 4.</simpara>
<simpara>In that case the left panel would have <literal>flex: 1</literal>.
The right panel would have <literal>flex: 3</literal>.</simpara>
</section>
<section id="_example_32">
<title>Example</title>
<simpara>This example first deducts 100px from the total 100%.
Then it calculates the flexes.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : {
        type: 'hbox',
        align: 'middle',
        pack : 'end'
    },

    defaults: {
        style: 'background: red',
        margin: 5,
        xtype: 'container',
    },
    items : [ {
        html : 'Panel Left',
        flex: 1
    }, {
        html : 'Panel Two'
        width: 100
    }, {
        html : 'Panel Three',
        flex: 3
    } ],

    height : 300,
    width : 500,
    renderTo : Ext.getBody()
});</programlisting>
<section id="_align">
<title>Align</title>
<simpara>Vertical alignment
* <literal>align</literal> (defaults to <emphasis>top</emphasis>)</simpara>
<simpara><literal>top</literal> : child items are aligned vertically at the top of the container.
<literal>middle</literal> : child items are aligned vertically in the middle of the container.
<literal>bottom</literal> : child items are aligned vertically at the bottom of the container.
<literal>stretch</literal> : child items are stretched vertically to fill the height of the container.
<literal>stretchmax</literal> : child items are stretched vertically to the height of the largest item.</simpara>
</section>
<section id="_pack">
<title>Pack</title>
<simpara>Horizontal alignment
* <literal>align</literal> (defaults to <emphasis>start</emphasis>)</simpara>
<simpara><literal>start</literal> : child items are packed together at the left side of container.
<literal>center</literal> : child items are packed together at mid-width of container.
<literal>end</literal> : child items are packed together at right side of container.
=== Vbox</simpara>
</section>
</section>
<section id="_what_8217_s_it_2">
<title>What&#8217;s it?</title>
<simpara>A light weight vertical box layout.
This layout optionally divides available vertical space between child items containing a numeric flex configuration.</simpara>
</section>
<section id="_specs_32">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.VBox</literal> (<literal>layout:vbox</literal>)</simpara>
<figure id="layouts_vbox"><title>Vertical Box layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vbox.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vbox.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.VBox">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.VBox</ulink></simpara>
</section>
<section id="_example_33">
<title>Example</title>
<example id="vbox_code">
<title>Example vbox layout</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : {
        type: 'vbox',
        align: 'center',
        pack : 'end'
    },

    defaults: {
        style: 'background: red',
        margin: 5,
        xtype: 'container',
        width: 200,
        height: 50
    },
    items : [ {
        html : 'Panel One'
    }, {
        html : 'Panel Two'
    }, {
        html : 'Panel Three'
    } ],

    height : 300,
    width : 500,
    renderTo : Ext.getBody()
});</programlisting>
</example>
<example>
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.Panel', {
    width: 500,
    height: 300,
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    renderTo: document.body,
    defaults: {
        style: 'background: red',
        margin: 5
    },
    items: [{
        xtype: 'container',
        flex: 2
    },{
        xtype: 'container',
        flex: 1
    },{
        xtype: 'container',
        flex: 1
    }]
});</programlisting>
</example>
<section id="_align_2">
<title>Align</title>
<simpara>Horizontal alignment.
* <literal>align</literal> (defaults to <emphasis>left</emphasis>)</simpara>
<simpara><literal>left</literal> : child items are aligned horizontally at the left of the container.
<literal>center</literal> : child items are aligned horizontally at the mid-width of the container.
<literal>right</literal> : child items are aligned horizontally at the right of the container.
<literal>stretch</literal> : child items are stretched horizontally to fill the width of the container.
<literal>stretchmax</literal> : child items are stretched horizontally to the width of the largest item.</simpara>
</section>
<section id="_pack_2">
<title>Pack</title>
<simpara>Vertical alignment.
* <literal>pack</literal> (defaults to <emphasis>start</emphasis>)</simpara>
<simpara><literal>start</literal> : child items are packed together at the top of container.
<literal>center</literal> : child items are packed together at mid-height of container.
<literal>end</literal> : child items are packed together at bottom of container.
=== Border</simpara>
</section>
</section>
<section id="_what_8217_s_it_3">
<title>What&#8217;s it?</title>
<simpara>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars between regions and built-in expanding and collapsing of regions.</simpara>
</section>
<section id="_specs_33">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.Border</literal> (<literal>layout:border</literal>)</simpara>
<figure id="layouts_vbox"><title>Border layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/border.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/border.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Border">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Border</ulink></simpara>
</section>
<section id="_example_34">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    layout : 'border',
    items : [ {
        title : 'West',
        region : 'west',
        width : 60
    }, {
        title : 'East',
        region : 'east',
        width : 60
    }, {
        title : 'South',
        region : 'south',
        height : 60
    }, {
        title : 'North',
        region : 'north',
        height : 60
    }, {
        title : 'Center',
        region : 'center'
    } ],

    title : 'Border Layout Panel',
    defaults : {margin : 4},
    bodyPadding : 8,
    height : 300, width : 600,
    renderTo : Ext.getBody()
});</programlisting>
</example>
<section id="_how_it_works">
<title>How it works</title>
<simpara>Border layouts are designed to layout child panels. There is a primary center child, and other children relative to the center.</simpara>
<simpara>Children may be at the <literal>west</literal>, <literal>north</literal>, <literal>east</literal> or <literal>south</literal>, specified via <literal>region</literal> on each child. A center child is required; the other positions are optional.</simpara>
</section>
<section id="_resizing_children">
<title>Resizing Children</title>
<simpara>Child panels may be resized by tagging them with <literal>split : true</literal>.</simpara>
<simpara>When using the split option, the layout will automatically insert a <literal>Ext.resizer.Splitter</literal> into the appropriate place. This will modify the underlying items collection in the container.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : 'border',

    items : [ {
        title : 'West (resizable)',
        region : 'west',
        split : true,
        width : 100
    }, {
        title : 'East',
        region : 'east',
        width : 60
    }, {
        title : 'South (resizable)',
        region : 'south',
        split : true,
        height : 60
    }, {
        title : 'North',
        region : 'north',
        height : 60
    }, {
        title : 'Center',
        region : 'center'
    } ],

    title : 'Border Layout Panel',
    bodyPadding : 8,
    height : 340, width : 600,
    renderTo : Ext.getBody()
});</programlisting>
</section>
<section id="_collapsible_childeren">
<title>Collapsible childeren</title>
<simpara>Adjacent panels resize properly when child panels are collapsed. Furthermore, you can specify <literal>collapseMode : <emphasis>mini</emphasis></literal> to have the panel fully collapse and hide its header.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : 'border',

    items : [ {
        title : 'North',
        region : 'north',

        collapsible : true,

        height : 80
    }, {
        title : 'South (collapseMode : \'mini\')',
        region : 'south',

        collapsible : true,
        collapseMode : 'mini',

        height : 80
    }, {
        title : 'Center',
        region : 'center'
    } ],

    title : 'Border Layout Panel',
    bodyPadding : 8,
    height : 340, width : 400,
    renderTo : Ext.getBody()
});</programlisting>
</section>
<section id="_weights">
<title>Weights</title>
<simpara>The region weight determine the priority / weight of each column.
(You can compare this with HTML tables, where you could set rowspan and colspan, to stretch out columns or rows (although these layouts are of course no tables.)</simpara>
<simpara>It works a bit like in CSS where you have Z-index.  An element with a greater stack order is always in front of element with a lower stack order. Who is the boss of the spot.
There is just one spot. – And you stack on top of each other.</simpara>
<simpara>Now with a border layout, you have to check who is the boss over one of the 4 spots.
The four spots are the corners.</simpara>
<simpara>WN – N – NE
 W - C - E
WS - S - SE</simpara>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    layout : 'border',
    items : [ {
        title : 'West',
        region : 'west',
        width : 60
    }, {
        title : 'East',
        region : 'east',
        width : 60,
        weight: 20
    }, {
        title : 'South',
        region : 'south',
        height : 60,
        weight: 10
    }, {
        title : 'North',
        region : 'north',
        height : 60,
        weight: 30
    }, {
        title : 'Center',
        region : 'center',
    } ],

    title : 'Weight Test',
    defaults : {margin : 4},
    bodyPadding : 8,
    height : 300, width : 600,
    renderTo : Ext.getBody()
});</programlisting>
</section>
</section>
</section>
<section id="_fit">
<title>Fit</title>
<section id="_what_8217_s_it_4">
<title>What&#8217;s it?</title>
<simpara>A layout that can only be used for containers that contain one single item.
It will automatically expand to fill the full layout container.</simpara>
</section>
<section id="_specs_34">
<title>Specs</title>
<simpara>Class: <literal>http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Fit</literal> (<literal>layout: fit</literal>)</simpara>
<figure id="layouts_fit"><title>Fit layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/fit.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/fit.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/TODO">http://docs.sencha.com/extjs/4.2.1/#!/api/TODO</ulink></simpara>
</section>
<section id="_example_35">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    height: 300,
    width: 300,
    bodyPadding: 10,

    layout : 'fit',
    items : [{
        xtype : 'component',
        style : {'background-color' : 'red'}
    }],
    renderTo: Ext.getBody()
});</programlisting>
</example>
</section>
</section>
<section id="_card">
<title>Card</title>
<section id="_what_8217_s_it_5">
<title>What&#8217;s it?</title>
<simpara>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be visible at any given time. This layout style is most commonly used for wizards, tab implementations, etc.</simpara>
</section>
<section id="_specs_35">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.Card</literal> (<literal>layout:card</literal>)</simpara>
<figure id="layouts_card"><title>Card layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/card.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/card.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Card">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Card</ulink></simpara>
</section>
<section id="_example_36">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {

    layout : 'card',

    items : [ {
        style: 'background: red'
    }, {
        style: 'background: green'
    }, {
        style: 'background: blue'
    } ],
    buttons : [ {
        text : '&lt;',
        handler : function(b) {
            b.up('panel').getLayout().prev();
        }
    }, {
        text : '&gt;',
        handler : function(b) {
            b.up('panel').getLayout().next();
        }
    } ],

    bodyPadding : 5,
    defaults : {
        xtype: 'component'
    },
    height : 200,
    width : 200,
    renderTo : Ext.getBody()

});</programlisting>
</example>
</section>
<section id="_how_it_works_2">
<title>How it works</title>
<simpara>Since only one panel is displayed at a time, the only way to move from one Component to the next is by calling <literal>setActiveItem()</literal> on the layout of the Container, passing the next panel to display (or its id or index). The layout itself does not provide a user interface for handling this navigation, so that functionality must be provided by the developer.</simpara>
</section>
</section>
<section id="_anchor">
<title>Anchor</title>
<section id="_what_8217_s_it_6">
<title>What&#8217;s it?</title>
<simpara>A layout mostly used in forms. With the anchor layout
you can specify the width and heights per field
in percentages relative to the container&#8217;s dimensions.</simpara>
</section>
<section id="_specs_36">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.Anchor</literal> (<literal>layout:anchor</literal>)</simpara>
<figure id="layouts_anchor"><title>Anchor layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/anchor.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/anchor.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also:
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Anchor">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Anchor</ulink></simpara>
</section>
<section id="_example_37">
<title>Example</title>
<example id="anchor">
<title>Example anchor layout</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    title: 'Form Panel with anchor layout',
    bodyPadding: 5,
    width: 350,

    layout: 'anchor',
    defaults: {
        anchor: '100%'
    },

    defaultType: 'textfield',
    items: [{
        fieldLabel: 'First Name',
        name: 'first',
        allowBlank: false,
        anchor: '70%'
    },{
        fieldLabel: 'Last Name',
        name: 'last',
        allowBlank: false
    },
    {
        fieldLabel: 'Age',
        name: 'age',
        allowBlank: false,
        anchor: '40%'
    }],
    renderTo: Ext.getBody()
});</programlisting>
</example>
<section id="_how_it_works_3">
<title>How it works</title>
<simpara>Specify one String where the first percentage points to the width
(relative to the container&#8217;s dimensions) and the second percentage to
the height.</simpara>
<simpara>It is possible to enter pixels. A negative pixel value will deduct the
amount of pixels from the 100% container height or width.
A positive pixel value will add it on top of the 100% (which usually don&#8217;t make sense).
=== Column</simpara>
</section>
</section>
<section id="_what_8217_s_it_7">
<title>What&#8217;s it?</title>
<simpara>Another layout that&#8217;s mostly used in forms to create columns.
It&#8217;s possible to define a <literal>columnWidth</literal> per container item.</simpara>
</section>
<section id="_specs_37">
<title>Specs</title>
<simpara>Class: <literal>Ext.layout.container.Column</literal> (<literal>layout:column</literal>)</simpara>
<figure id="layouts_column"><title>Anchor column</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/column.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/column.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>See also
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Column">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.layout.container.Column</ulink></simpara>
</section>
<section id="_example_38">
<title>Example</title>
<example id="panels">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.form.Panel', {
    title: 'Column Layout',
    bodyPadding: 8,
    labelWidth: 80,
    width: 550,
    layout:'column',
    defaults:{
        xtype: 'textfield',
        padding: 3,
        columnWidth: 0.33,   //change this to 0.33
    },
    items: [{
        fieldLabel: 'First Name',
    },{
        fieldLabel: 'Middle Name',
    },{
        fieldLabel: 'Last Name',
    },{
        fieldLabel: 'Nick Name',
    }, {
        fieldLabel: 'Age'
    },
    {
        fieldLabel: 'Phone'
    }],
    renderTo: Ext.getBody()
});</programlisting>
</example>
<section id="_how_it_works_4">
<title>How it works</title>
<simpara>ColumnWidth values map percentages but needs to be specified as values between 0 to 1.
Ext will automatically calculate columns, from left to right.
Keep in mind, that paddings are included within each width.</simpara>
</section>
</section>
</section>
</chapter>
<chapter id="_overview_of_all_out_of_the_box_themes">
<title>Overview of all out of the box themes</title>
<section id="_objectives_3">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn theming inheritance
</simpara>
</listitem>
<listitem>
<simpara>
Overview out of the box themes
</simpara>
</listitem>
<listitem>
<simpara>
How to switch themes
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_themes_are_packages">
<title>Themes are packages</title>
<simpara>In Ext JS 4.2, themes, plugins and locales are packages.</simpara>
<simpara>Since themes are packages, you can share the themes with other applications.</simpara>
</section>
<section id="_theme_inheritance">
<title>Theme Inheritance</title>
<simpara>A theme always extends from the base theme. The base theme defines basic things like the layout.</simpara>
<figure id="styles_createfontpack1"><title>Inheritance tree</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_inheritance1.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_inheritance1.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_overview_themes">
<title>Overview Themes</title>
<section id="_base_theme">
<title>Base Theme</title>
<simpara>When creating your own theme, you typically wouldn&#8217;t extend
from Base, although it is possible.</simpara>
<simpara>When you extend from Base, you have to style every Ext JS
component yourself. It will cost you more time but the
result is that you have a fully custom theme.</simpara>
<simpara>It contains the bare minimum set of CSS rules that are absolutely required for Ext JS Components and Layouts to work correctly.</simpara>
<simpara>The <emphasis role="strong">Base</emphasis> Theme is subclassed by all other themes.</simpara>
</section>
<section id="_neutral_theme">
<title>Neutral Theme</title>
<simpara>Contains all the Sencha variables and style rules
used by the custom themes.</simpara>
<simpara>The Neutral theme extends from the <emphasis role="strong">Base</emphasis> theme.</simpara>
</section>
<section id="_neptune_theme">
<title>Neptune Theme</title>
<simpara>Modern borderless theme.</simpara>
<simpara>The Neptune theme extends form the <emphasis role="strong">Neutral</emphasis> theme.</simpara>
<figure id="overviewthemes_neptune"><title>Neptune theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_neptune.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_neptune.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_neptune_rtl_theme_example">
<title>Neptune RTL Theme Example</title>
<simpara>Text from right to left, support.</simpara>
<figure id="overviewthemes_neptune"><title>Neptune RTL theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_neptune_rtl.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_neptune_rtl.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_classic_theme">
<title>Classic Theme</title>
<simpara>Classic theme, replica of the old Ext 3 theme.</simpara>
<simpara>The Classic theme also extends form the <emphasis role="strong">Neutral</emphasis> theme.</simpara>
<figure id="overviewthemes_classic"><title>Classic theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_classic.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_classic.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_classic_themes">
<title>Classic Themes</title>
<simpara>Two other themes, gray and accessibility, extend from the classic theme.</simpara>
<figure id="styles_createfontpack2"><title>Inheritance tree</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_inheritance2.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_inheritance2.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_gray_theme">
<title>Gray Theme</title>
<simpara>Classic theme with a gray base color.</simpara>
<simpara>The Gray theme extends from the <emphasis role="strong">Classic</emphasis> theme.</simpara>
<figure><title>Gray theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_gray.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_gray</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_accessibility_theme">
<title>Accessibility Theme</title>
<simpara>Classic theme optimized for accessibility.</simpara>
<simpara>The Accessibility theme extends from the <emphasis role="strong">Classic</emphasis> theme.</simpara>
<figure><title>Accessibility theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_access.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_acces</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_future_neptune_touch_theme">
<title>FUTURE: Neptune Touch Theme</title>
<simpara>Comming soon.</simpara>
<simpara>Touch support.
(for example, icons are bigger)</simpara>
<figure><title>Neptune Touch Theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_neptune_touch.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_acces</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_future_crisp_touch_theme">
<title>FUTURE: Crisp Touch Theme</title>
<simpara>Comming soon.</simpara>
<simpara>Touch support.
(for example, icons are bigger)</simpara>
<figure><title>Crisp Touch Theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_crisp.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_acces</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section id="_switching_themes">
<title>Switching themes</title>
<simpara>When you generate an application with Sencha Cmd,
by default the <emphasis role="strong">Classic</emphasis> theme is used.</simpara>
<simpara>How can you switch themes?</simpara>
<section id="_don_8217_t_touch_the_lt_style_gt_tag">
<title>Don&#8217;t touch the &lt;style&gt; tag</title>
<simpara>What&#8217;s common in lots of web applications, is not so common in Ext JS.
When you want to switch your theme, you <emphasis role="strong">do not change
the <literal>&lt;style&gt;</literal></emphasis> in the <emphasis>index.html</emphasis> file.</simpara>
<figure><title>Do not change Stylesheet in the index.html</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_switch1.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_switch1</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_how_to_switch">
<title>How to switch?</title>
<simpara>Since Ext 4.2.2. and Sencha Cmd 4,
the easiest way to switch a theme in your application, is by adding the
<literal>"theme"</literal> property to <emphasis>myapp/app.json</emphasis>.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
    "name": "ExtReader",

    "requires": [],

    "theme" : "Goggles",
}</programlisting>
<itemizedlist><title>Optional values are</title>
<listitem>
<simpara>
ext-theme-classic
</simpara>
</listitem>
<listitem>
<simpara>
ext-theme-gray
</simpara>
</listitem>
<listitem>
<simpara>
ext-theme-access
</simpara>
</listitem>
<listitem>
<simpara>
ext-theme-neptune
</simpara>
</listitem>
<listitem>
<simpara>
[your own custom theme?]
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_how_to_switch_2">
<title>How to switch?</title>
<simpara>Before Ext 4.2.2. &amp; Sencha Cmd 4; you had to switch an Ext 4.x theme by opening
a hidden sencha config file.</simpara>
<simpara>To configure your app to use a different theme,
change the following line in <emphasis>[myapp]/.sencha/app/sencha.cfg</emphasis></simpara>
<programlisting language="javascript" linenumbering="unnumbered">app.theme=ext-theme-classic</programlisting>
</section>
<section id="_example_39">
<title>Example</title>
<figure><title>Switch themes in the sencha.cfg file</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_switch2.png" scale="75"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_switch2</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_enable_hidden_files">
<title>Enable hidden files</title>
<simpara>Can&#8217;t find the <emphasis>.sencha</emphasis> hidden folder?
Try to enable hidden files in your OS.</simpara>
<itemizedlist><title>Mac OSX</title>
<listitem>
<simpara>
Type the following command in your terminal:<?asciidoc-br?>
<literal>defaults write com.apple.finder AppleShowAllFiles TRUE</literal><?asciidoc-br?>
<literal>killall Finder</literal><?asciidoc-br?>
(running these commands with <literal>FALSE</literal> will hide the files again)
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>Windows 7</title>
<listitem>
<simpara>
Go to: <emphasis role="strong">Control Panel</emphasis> &gt; <emphasis role="strong">Appearance and Personalization</emphasis> &gt;
<emphasis role="strong">Folders Options</emphasis> &gt; <emphasis>Link: Show hidden files and folders</emphasis><?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
Select the radio button labeled <emphasis role="strong">Show hidden files, folders, and drives.</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Remove the checkmark from the checkbox labeled <emphasis role="strong">Hide extensions for known file types.</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Remove the checkmark from the checkbox labeled <emphasis role="strong">Hide protected operating system files (Recommended).</emphasis>
</simpara>
</listitem>
</itemizedlist>
<figure><title>Show hidden files in Windows 7</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/appendix_win_showhidden.jpg"/>
  </imageobject>
  <textobject><phrase>[overviewthemes_showhidden_windows</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_build_theme">
<title>Build Theme</title>
<simpara>When you have already run a build of the app using the classic theme, you should clean the build directory.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sencha ant clean</programlisting>
<simpara>Then build the app:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sencha app build</programlisting>
</section>
</section>
<section id="_lab_switch_from_classic_to_neptune_theme">
<title>Lab: Switch from Classic to Neptune theme</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Verify Sencha Cmd version number
</simpara>
</listitem>
<listitem>
<simpara>
Switch themes
</simpara>
</listitem>
<listitem>
<simpara>
Build application
</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Confirm Sencha Cmd version. It should have version 4.0.x</emphasis>
</simpara>
<simpara><literal>sencha which</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Confirm your app looks like <xref linkend="lab1_classic"/>. It has the Classic theme by default and no specific app styling.</emphasis>
</simpara>
<figure id="lab1_classic"><title>ExtReader app with Classic theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-classic.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-classic.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your editor the following file /extreader/.sencha/app/sencha.cfg</emphasis>
</simpara>
<simpara>Please note, the <emphasis>.sencha</emphasis> folder is a hidden folder.
You need to change the visibility of hidden folders for your OS.</simpara>
<screen>*Mac users*:
+
Make hidden files visible.
To achieve this, type the following command in your terminal: +
`defaults write com.apple.finder AppleShowAllFiles TRUE` +
`killall Finder` +
(running these commands with FALSE will disable showing hidden files again)

*Windows users*:
+
TODO</screen>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Switch the app.theme to the out of the box Neptune theme:</emphasis>
</simpara>
<simpara><literal># The name of the package containing the theme scss for the app</literal></simpara>
<simpara><literal>app.theme=ext-theme-classic</literal></simpara>
<simpara>to</simpara>
<simpara><literal>app.theme=ext-theme-neptune</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the app, to see the changes:</emphasis>
</simpara>
<simpara>Run the following command on the CLI, from the <emphasis>extreader</emphasis> folder:</simpara>
<simpara><literal>sencha app build</literal></simpara>
<simpara>Your ExtReader application should look like <xref linkend="lab1_neptune"/>:</simpara>
<figure id="lab1_neptune"><title>ExtReader app with Neptune theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-neptune.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-neptune.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter id="_generating_custom_themes">
<title>Generating custom themes</title>
<section id="_objectives_4">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn how to generate themes
</simpara>
</listitem>
<listitem>
<simpara>
Understand the package folder structure
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to extend from Sencha themes
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_generating_themes">
<title>Generating themes</title>
<simpara>When you want to create a new custom theme, you can
generate a starting point with Sencha Cmd.</simpara>
<section id="_about_the_command_line">
<title>About the Command Line</title>
<simpara>Sencha Cmd is a tool on the command line (CLI).
You will use your Windows Console or Mac Terminal for this.</simpara>
<itemizedlist><title>Windows</title>
<listitem>
<simpara>
<emphasis role="strong">Start</emphasis> &gt; <emphasis role="strong">Run</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Type: <literal>cmd</literal> and press <emphasis>ok</emphasis>
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>Mac OSX</title>
<listitem>
<simpara>
<emphasis role="strong">Applications</emphasis> &gt; <emphasis role="strong">Utils</emphasis> &gt; <emphasis role="strong">Terminal</emphasis>
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_about_sencha_cmd">
<title>About Sencha Cmd</title>
<itemizedlist><title>Sencha Cmd is a command-line tool that makes it quick and easy to do several application-development tasks.</title>
<listitem>
<simpara>
Generate commands
</simpara>
<itemizedlist>
<listitem>
<simpara>
Generate workspaces
</simpara>
</listitem>
<listitem>
<simpara>
Generate apps
</simpara>
</listitem>
<listitem>
<simpara>
Generate themes
</simpara>
</listitem>
<listitem>
<simpara>
and more&#8230;
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Build-in webserver
</simpara>
</listitem>
<listitem>
<simpara>
Build tools
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_generate_a_theme">
<title>Generate a theme</title>
<programlisting language="javascript" linenumbering="unnumbered">sencha generate theme MyTheme</programlisting>
<simpara>This will generate a theme for the package folder structure.</simpara>
</section>
<section id="_package_folder_structure">
<title>Package folder structure</title>
<simpara>The folder structure of a theme looks like this:</simpara>
<itemizedlist><title>[workspace/root folder]/packages/mytheme/</title>
<listitem>
<simpara>
package.json
This is the package properties file. It tells Sencha Cmd certain things about the package like its name, version, and dependencies (other packages that it requires).
</simpara>
</listitem>
<listitem>
<simpara>
build
The build of the theme
</simpara>
</listitem>
<listitem>
<simpara>
overrides
This directory contains any JavaScript overrides to Ext JS Component classes that may be required for theming those Components.
</simpara>
</listitem>
<listitem>
<simpara>
resources
This directory contains images and other static resources that your theme requires.
</simpara>
</listitem>
<listitem>
<simpara>
sass
</simpara>
<itemizedlist>
<listitem>
<simpara>
etc<?asciidoc-br?>
        contains additional utility functions or mixins
</simpara>
</listitem>
<listitem>
<simpara>
src<?asciidoc-br?>
        contains Sass rules and UI mixins
</simpara>
</listitem>
<listitem>
<simpara>
var<?asciidoc-br?>
        contains Sass variables
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section id="_extending_themes">
<title>Extending themes</title>
<simpara>A new generated theme always extends from the <emphasis role="strong">Classic</emphasis> theme.</simpara>
<simpara>When you want to inherit from the <emphasis role="strong">Neptune</emphasis> theme instead
you will need to change the <literal>extend</literal>.</simpara>
<figure id="styles_createfontpack1"><title>Inheritance tree</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_inheritance3.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_inheritance3.png</phrase></textobject>
</mediaobject>
</figure>
<section id="_change_the_extend">
<title>Change the extend</title>
<simpara>To change the inheritance of the custom theme. Open
<emphasis>/packages/MyTheme/package.json</emphasis></simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
    "name": "MyTheme",
    "type": "theme",
    "creator": "Lee Boonstra",
    "version": "1.0.0",
    "compatVersion": "1.0.0",
    "local": true,
    "requires": [],
    "extend": "ext-theme-neptune" //ext-theme-classic
}</programlisting>
</section>
<section id="_refresh_the_app">
<title>Refresh the app</title>
<simpara>You now need to refresh your application.</simpara>
<simpara>This ensures that the correct theme JavaScript files are included in the application&#8217;s "bootstrap.js" file so that the application can be run in development mode.</simpara>
<simpara>Run from the app directory the following command:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sencha app refresh</programlisting>
</section>
</section>
</chapter>
<chapter id="_lab_generate_custom_theme">
<title>Lab: Generate custom theme</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Generate a custom theme
</simpara>
</listitem>
<listitem>
<simpara>
Build a theme
</simpara>
</listitem>
<listitem>
<simpara>
Understand the theme folder structure
</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Generate a theme</emphasis>
</simpara>
<simpara>Run the following command on the CLI, from the <emphasis>extreader</emphasis> folder.</simpara>
<simpara><literal>sencha generate theme Goggles</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the theme, to get an overview of all the components</emphasis>
</simpara>
<simpara>Run the following command on the CLI, from the <emphasis>extreader</emphasis> folder:</simpara>
<simpara><literal>sencha theme build Goggles</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Review your theme folder structure</emphasis>
</simpara>
<simpara>Browse to <emphasis>advancedtheming/packages/Goggles/build</emphasis> folder and review all the generated files.</simpara>
<simpara>This will generate a custom theme, but it still has the looks of the Classic theme.</simpara>
</listitem>
</orderedlist>
<figure id="lab2_classic"><title>ExtReader app with Custom theme which extends from the Classic theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-classic.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-classic.png</phrase></textobject>
</mediaobject>
</figure>
</chapter>
<chapter id="_lab_extend_from_the_neptune_theme">
<title>Lab: Extend from the Neptune theme</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Extend from the Neptune theme
</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Extend from the Neptune theme:</emphasis>
</simpara>
<simpara>Open <emphasis>packages/Goggles/package.json</emphasis> and change the <literal>extend</literal> to <literal>ext-theme-neptune</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Change the creator name to your name</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your editor the sencha config file <emphasis>/extreader/.sencha/app/sencha.cfg</emphasis></emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Switch the app.theme to the out of the new Goggles theme</emphasis>
</simpara>
<simpara>(See Lab 1)</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the app, to see the changes</emphasis>
</simpara>
<simpara>Run the following command on the CLI, from the <emphasis role="strong">extreader</emphasis> folder:</simpara>
<simpara><literal>sencha app build</literal></simpara>
</listitem>
</orderedlist>
<figure id="lab3_neptune"><title>ExtReader app with Custom theme which extends from the Neptune theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-neptune.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-neptune.png</phrase></textobject>
</mediaobject>
</figure>
</chapter>
<chapter id="_about_sass_amp_compass">
<title>About Sass &amp; Compass</title>
<section id="_objectives_5">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Working with Sass
</simpara>
<itemizedlist>
<listitem>
<simpara>
Comments
</simpara>
</listitem>
<listitem>
<simpara>
File structure
</simpara>
</listitem>
<listitem>
<simpara>
Nesting
</simpara>
</listitem>
<listitem>
<simpara>
Variables
</simpara>
</listitem>
<listitem>
<simpara>
Interpolation
</simpara>
</listitem>
<listitem>
<simpara>
Math &amp; Colors
</simpara>
</listitem>
<listitem>
<simpara>
Mixins
</simpara>
</listitem>
<listitem>
<simpara>
Directives
</simpara>
</listitem>
<listitem>
<simpara>
Extends
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section id="_the_old_way">
<title>The old way</title>
<simpara>CSS is crafted to be simple but scaling is just difficult.
When you have a big Stylesheet, it is hard to maintain all the
slight variantions of colors, fonts and dimensions.
And it just easily becomes messy.</simpara>
<simpara>Also the Stylesheet size may become unmaintainable. There is
no easy way to divide Stylesheets in multiple Stylesheets without
a performance hit.</simpara>
</section>
<section id="_about_sass">
<title>About Sass</title>
<simpara>Sass stands for: "Syntactically Awesome Stylesheets". It&#8217;s
like CSS but adds a lot of features to its shortcomings.</simpara>
<simpara>Sass has two syntaxes. The most commonly used syntax is known as “SCSS” (for “Sassy CSS”), and is a superset of CSS3’s syntax. This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss.</simpara>
<simpara>The second, older syntax is known as the indented syntax (or just “.sass”). Instead of brackets and semicolons, it uses the indentation of lines to specify blocks. Files in the indented syntax use the extension .sass.</simpara>
<simpara><ulink url="http://sass-lang.com/">http://sass-lang.com/</ulink>
<ulink url="http://thesassway.com/">http://thesassway.com/</ulink></simpara>
</section>
<section id="_preprocessor">
<title>Preprocessor</title>
<simpara>Like CoffeeScript or HAML.
You will start developing a Sass File (Sassy CSS / .scss),
compile it with a Sass compiler
and then use the CSS file in your browser.</simpara>
</section>
<section id="_watch_for_changes">
<title>Watch for changes</title>
<simpara>To compile from a Sassy CSS file to a normal CSS file, you can let Sass
<emphasis role="strong">watch</emphasis> your .scss file for changes.</simpara>
<simpara>Run this command from the CLI:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sass --watch app.scss:style.css</programlisting>
<simpara>Every time when you hit save in your editor, the file will be compiled.</simpara>
</section>
<section id="_about_compass">
<title>About Compass</title>
<simpara>CSS3 framework.
Compass makes working with Sass even easier.</simpara>
<simpara><ulink url="http://compass-style.org/reference/compass/css3/">http://compass-style.org/reference/compass/css3/</ulink></simpara>
</section>
<section id="_install_sass_amp_compass">
<title>Install Sass &amp; Compass</title>
<simpara>Sass and Compass run on top of Ruby.
Windows developers will need to download Ruby 1.x
When Ruby is installed you can install the Sass and Compass gems from the CLI:</simpara>
<simpara><literal>gem install Sass</literal><?asciidoc-br?>
<literal>gem install Compass</literal></simpara>
<simpara>You will need to have administrative rights on the CLI.
Mac OSX users, can prefix with <literal>sudo</literal></simpara>
</section>
<section id="_sass_basics">
<title>Sass basics</title>
<section id="_first_of_all_8230">
<title>First of all&#8230;</title>
<simpara>You can still use CSS code in your Sassy CSS files.</simpara>
<simpara>Just take it over and slidly modify it to your needs.</simpara>
</section>
<section id="_comments">
<title>Comments</title>
<simpara>With Sass it is possible to write single line comments.
These files won&#8217;t be compiled in your CSS output.
Though multiline comments will.</simpara>
<formalpara><title>app.scss</title><para>
<programlisting language="javascript" linenumbering="unnumbered">//These lines of comments
//won't be visibile in my CSS file

/* but this line will.</programlisting>
</para></formalpara>
<formalpara><title>app.css</title><para>
<programlisting language="javascript" linenumbering="unnumbered">/* but this line will. */</programlisting>
</para></formalpara>
</section>
<section id="_file_structure">
<title>File structure</title>
<simpara>To create structure in your Stylesheets, you can use the <literal>@import</literal> code.</simpara>
<simpara>In CSS <literal>@import</literal> downloads the CSS files after each other (not in parrallel)
that makes a performance hit.</simpara>
<simpara>This is not the case with Sass. Since Sass compiles the Stylesheet
on the clientside. Your output will be just one single CSS file.
=== Nesting
.A different way of identing
* Nesting improves readability
* Don&#8217;t code repetitive selectors</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        background: red;

        .inner {
                padding: 2px;
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { background: red; }
.button .inner { padding: 2px; }</programlisting>
</section>
<section id="_nesting_namespaces">
<title>Nesting namespaces</title>
<simpara>You can also nest namespaces:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        font: {
                size: 12px;
                family: 'Helvetica';
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { font-size: 12px; font-family: 'Helvetica'; }</programlisting>
</section>
<section id="_parent_selector">
<title>Parent selector</title>
<simpara>The <literal>&amp;</literal> stands for the (first) parent selector.
You can point to the parent selector while nesting.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        background: red;

        //when a red button is on a red background
        //make the button orange.
        .redbg &amp; {
                background: orange;
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { background: red; }
.redbg .button { background: orange; }</programlisting>
</section>
<section id="_parent_selector_2">
<title>Parent selector</title>
<simpara>Here&#8217;s another example, while nesting deeper.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        background: red;

        span {
                .redbg &amp; {
                        background: orange;
                }
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { background: red; }
.redbg .button span { background: orange; }</programlisting>
</section>
<section id="_rule_of_thumb">
<title>Rule of thumb</title>
<simpara>Try not to nest deeper then 3 or 4 levels.
It can become hard to understand and also
when you use to many selectors, it will be hard
to overrule the style.</simpara>
</section>
<section id="_nesting_selectors">
<title>Nesting selectors</title>
<simpara>Note <literal>&amp;.round</literal>. There is no space between the parent selector
and the CSS class <literal>.round</literal>.</simpara>
<simpara>Therefore this rule only applies on elements with a <literal>button</literal> CSS class
that <emphasis role="strong">also</emphasis> have a <literal>round</literal> CSS class.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        background: red;
        .inner {
                //looks inside the scope of .button
                //for a class .inner
                text-transform: uppercase;
        }
        &amp;.round {
                //has both classes on the same time
                border-radius: 5px;
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { background: red; }
.button .inner { text-transform: uppercase; }
.button.round { border-radius: 5px; }</programlisting>
</section>
<section id="_nesting_selectors_with_parent_selectors">
<title>Nesting selectors with parent selectors</title>
<simpara>Makes totally sense for pseudo selectors
such as <literal>:hover</literal> or <literal>:after</literal>.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.button {
        background: red;
        &amp;:hover {
                background: blue;
        }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.button { background: red; }
.button:hover { background: blue; }</programlisting>
</section>
</section>
<section id="_variables">
<title>Variables</title>
<simpara>You can create variables with Sass. Prefix with a <literal>$</literal> sign.
They can have any value for a CSS property,
such as colors, numbers (with units), or text.</simpara>
<simpara>Change the value on one place, i.s.o. maintaining the value
in your whole project.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;

.panel {
        background: $main-bg-color;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: red; }</programlisting>
<section id="_interpolation">
<title>Interpolation</title>
<simpara>Variables can be used for more than just property values. You can use <literal>#{}</literal> to insert them into property names or selectors.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">$vertical: 'top';
$horizontal: 'right';

.rounded {
        border-#{$vertical}-#{$horizontal}-radius: 10px;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.rounded { border-top-right-radius: 10px; }</programlisting>
</section>
<section id="_calculations">
<title>Calculations</title>
<simpara>Now, setting variables becomes super handy, when you
want to make <emphasis role="strong">math</emphasis> or <emphasis role="strong">color</emphasis> calculations with it.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;

.panel {
        background: darken($main-bg-color, 20%);
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: #990000; }</programlisting>
</section>
<section id="_color_opertations">
<title>Color opertations</title>
<section id="_darken">
<title>Darken</title>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;

.panel {
        background: darken($main-bg-color, 20%);
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: #990000; }</programlisting>
</section>
<section id="_lighten">
<title>Lighten</title>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;

.panel {
        background: lighten($main-bg-color, 20%);
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: #FF6666; }</programlisting>
</section>
<section id="_color_mix">
<title>Color Mix</title>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;
$main-alternative-color: blue;

.panel {
        background: $main-bg-color + $main-alternative-color;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background:fuchsia; }</programlisting>
</section>
<section id="_alpha">
<title>Alpha</title>
<programlisting language="javascript" linenumbering="unnumbered">$main-bg-color: red;

.panel {
        background: transparentize($main-bg-color, 0.25);
}</programlisting>
</section>
<section id="_and_more">
<title>And more</title>
<simpara>There are much more color operations.
<literal>hue</literal>, <literal>saturation</literal>, <literal>grayscale</literal>, <literal>invert</literal> etc&#8230;</simpara>
<simpara><ulink url="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html</ulink></simpara>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: rgba(255, 0, 0, 0.75); }</programlisting>
</section>
</section>
<section id="_math_functions">
<title>Math Functions</title>
<simpara>The standard math operations (+, -, *, /, and %) are supported for numbers.</simpara>
<section id="_calculations_2">
<title>Calculations</title>
<simpara>$container-width: 600px;
$font-size: 12px;</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.panel {
        width: $container-width / 3;
        line-height: $font-size * 1.5;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { width: 200px; line-height: 18px; }</programlisting>
</section>
<section id="_calculate_units">
<title>Calculate units</title>
<programlisting language="javascript" linenumbering="unnumbered">.panel {
        width: 1in + 8pt;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel { width: 1.111 in; }</programlisting>
</section>
</section>
</section>
<section id="_mixins">
<title>Mixins</title>
<simpara>Mixins allow you to define and reuse blocks of CSS properties</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@mixin branded-block() {
        background: #efefef;
        border: 2px solid #000;
        color: #000;
}
.panel {
   @include branded-block();
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.panel {
        background: #efefef;
        border: 2px solid #000;
        color: #000;
}</programlisting>
<section id="_mixins_with_arguments">
<title>Mixins with arguments</title>
<simpara>Mixins also accept parameterized variables</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@mixin custom-button-ui($color) {
        background-color: $color;
        &amp;:hover {
                background-color: lighten($color, 20%);
        }
}

.x-btn.custom {
        @include custom-button-ui(red)
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.x-btn.custom {
        background-color: red;
}
.x-btn.custom:hover{
        background-color: #ff6666;
}</programlisting>
</section>
</section>
<section id="_control_directives">
<title>Control Directives</title>
<simpara>It&#8217;s is possible to write some Sass Scripting code
in your mixins.</simpara>
<simpara>For example if/else branching:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@mixin sencha-button-ui($bgcolor) {
        background-color: $bgcolor;

        //if the background is black
        //then the front color may not be black too
        @if $bgcolor == #000 {
                color: #fff;
        } @else {
                color: #000;
        }
}

.x-btn.custom {
        @include sencha-button-ui(#000)
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.x-btn.custom { background-color: #000; color: fff; }</programlisting>
<section id="_each_loops">
<title>Each loops</title>
<simpara>Use the <literal>@each</literal> directive.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@mixin author-images() {
        $list: lee kevin max;
        @each $name in $list {
            .photo-#{$name} {
              background: url("avatars/#{$name}.png") no-repeat;
                }
        }
}

.author {
        @include author-images();
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.author .photo-lee {
        background: url("avatar/lee.png") no-repeat;
}

.author .photo-kevin {
        background: url("avatar/kevin.png") no-repeat;
}

.author .photo-max {
        background: url("avatar/max.png") no-repeat;
}</programlisting>
</section>
<section id="_for_loops">
<title>For loops</title>
<simpara>Use the <literal>@for</literal> directive.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@for $i from 1 through 4 {
  .column-#{$i} { width: 10px * $i; }
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.column-1 {
  width: 10px; }

.column-2 {
  width: 20px; }

.column-3 {
  width: 30px; }

.column-4 {
  width: 40px; }</programlisting>
</section>
<section id="_while_loops">
<title>While loops</title>
<simpara>Use the <literal>@while</literal> directive.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">$i: 1;
$width: 60px;

@while $i &lt; 4 {
  .grid-#{$i} { width: $width; }
  $width: $width + 80px;
  $i: $i + 1;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.grid-1 {
  width: 60px; }

.grid-2 {
  width: 140px; }

.grid-3 {
  width: 220px; }

.grid-4 {
  width: 300px; }</programlisting>
</section>
</section>
<section id="_extends">
<title>Extends</title>
<simpara>Use selector inheritance</simpara>
<itemizedlist>
<listitem>
<simpara>
You can extend / inherit from other CSS classes
</simpara>
</listitem>
<listitem>
<simpara>
Improves readability &amp; maintainability
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_example_40">
<title>Example</title>
<programlisting language="javascript" linenumbering="unnumbered">.alert {
    font-size: 0.9em;
    background-color: yellow;
}

.alert .warning {
    font-weight: bold;
}

.redalert {
    @extend .alert;
    background-color: red;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">.alert, .redalert {
    font-size: 0.9em;
    background-color: yellow;
}

.alert .warning, .redalert .warning {
    font-weight: bold;
}

.redalert {
    background-color: red;
}</programlisting>
</section>
</chapter>
<chapter id="_sencha_css_variables">
<title>Sencha CSS Variables</title>
<section id="_objectives_6">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Understanding Sencha Global variables
</simpara>
</listitem>
<listitem>
<simpara>
Understanding Sencha Component variables
</simpara>
</listitem>
<listitem>
<simpara>
Implementing Sencha CSS variables
</simpara>
</listitem>
<listitem>
<simpara>
Working with the <literal>app watch</literal> command
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_introduction">
<title>Introduction</title>
<simpara>As we learned from the lecture, Sass variables are very powerful.</simpara>
<example id="vars_snippet">
<title>Maintain the variables on one place.</title>
<programlisting language="javascript" linenumbering="unnumbered">$component-bg: blue;
.panel {
        background: $component-bg;
}</programlisting>
</example>
<example id="vars_snippet2">
<title>Compile the Sass Stylesheet for CSS output</title>
<programlisting language="javascript" linenumbering="unnumbered">.panel { background: blue; }</programlisting>
</example>
</section>
<section id="_sencha_css_variables_2">
<title>Sencha CSS variables</title>
<simpara>Sencha has their own Sass variables set in the <emphasis role="strong">Neutral</emphasis> theme.
Therefore we can use these CSS variables to customize our own
designs.</simpara>
<figure id="vars_inheritance"><title>Inheritance tree</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/overviewthemes_inheritance1.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/overviewthemes_inheritance1.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_2_types_of_variables">
<title>2 types of variables</title>
<formalpara><title>There are 2 types of variables set</title><para>+
* Global CSS variables</para></formalpara>
<simpara>+
Apply to the overall Stylesheet
* Component CSS variables</simpara>
<simpara>+
Apply to an Ext component</simpara>
</section>
<section id="_global_vars">
<title>Global Vars</title>
<section id="_api_docs">
<title>API Docs</title>
<simpara>Global CSS vars can be found in the API Docs to get
an exact overview.</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS</ulink></simpara>
<figure id="vars_docs"><title>Global CSS vars in the API Docs</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vars_apidocs_global.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vars_apidocs_global.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_where_to_implement">
<title>Where to implement</title>
<formalpara><title>In the labs we saved all our styles and vars</title><para>here:</para></formalpara>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/etc/all.scss</programlisting>
<simpara>We have seen that this file grows and it&#8217;s getting
harder to maintain. When you want to structure your Stylesheets,
a better a location to save global vars would be:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/var/Component.scss</programlisting>
</section>
<section id="_example_base_color">
<title>Example: Base-color</title>
<simpara>The base background color to be used throughout the theme (like backgrounds, panel headers etc&#8230;).</simpara>
<simpara><emphasis role="strong">packages/MyTheme/sass/etc/all.scss</emphasis></simpara>
<programlisting language="javascript" linenumbering="unnumbered">$base-color: green;</programlisting>
<figure id="vars_globalcss1"><title>Set the base color</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vars_globalcss.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vars_globalcss.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_example_neutral_color">
<title>Example: Neutral-color</title>
<simpara>The neutral background color to be used throughout the theme. (like buttons, headers etc&#8230;),
as an alternative to the <literal>$base-color</literal>.
Defaults to: <literal>#dcdcdc</literal></simpara>
<simpara><emphasis role="strong">packages/MyTheme/sass/etc/all.scss</emphasis></simpara>
<programlisting language="javascript" linenumbering="unnumbered">$neutral-color: #ccc</programlisting>
<figure id="vars_globalcss1"><title>Set the base color</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vars_globalcss.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vars_globalcss.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_overview_vars">
<title>Overview vars</title>
<simpara>There are much more global vars available.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>$base-color</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
$base-gradient
</simpara>
</listitem>
<listitem>
<simpara>
$body-background-color
</simpara>
</listitem>
<listitem>
<simpara>
$color
</simpara>
</listitem>
<listitem>
<simpara>
$css-shadow-border-radius
</simpara>
</listitem>
<listitem>
<simpara>
$font-family
</simpara>
</listitem>
<listitem>
<simpara>
$font-size
</simpara>
</listitem>
<listitem>
<simpara>
$image-search-path
</simpara>
</listitem>
<listitem>
<simpara>
$include-content-box
</simpara>
</listitem>
<listitem>
<simpara>
$include-default-uis
</simpara>
</listitem>
<listitem>
<simpara>
$include-not-found-images
</simpara>
</listitem>
<listitem>
<simpara>
$include-rtl
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>$neutral-color</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
$prefix
</simpara>
</listitem>
<listitem>
<simpara>
$relative-image-path-for-uis
</simpara>
</listitem>
<listitem>
<simpara>
$slicer-image-extension
</simpara>
</listitem>
<listitem>
<simpara>
$theme-resource-path
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_vars_to_exclude_browsers">
<title>Vars to exclude browsers</title>
<simpara>By default Ext JS includes all browsers,
these variables are set to <literal>true</literal>. However if you don&#8217;t support
a particular browser you can disable these so the file size
of your Stylesheet will become smaller.</simpara>
<itemizedlist>
<listitem>
<simpara>
$include-chrome
</simpara>
</listitem>
<listitem>
<simpara>
$include-ff
</simpara>
</listitem>
<listitem>
<simpara>
$include-ie
</simpara>
</listitem>
<listitem>
<simpara>
$include-opera
</simpara>
</listitem>
<listitem>
<simpara>
$include-safari
</simpara>
</listitem>
<listitem>
<simpara>
$include-webkit
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section id="_component_variables">
<title>Component variables</title>
<section id="_api_docs_2">
<title>API Docs</title>
<simpara>Component CSS vars can be found in the API Docs to get
an exact overview.</simpara>
<simpara>For example the CSS vars for buttons:
<ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button</ulink></simpara>
<figure id="vars_docs"><title>Component CSS vars in the API Docs</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vars_apidocs_components.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vars_apidocs_components.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_where_to_implement_2">
<title>Where to implement</title>
<formalpara><title>In the labs we saved all our styles and vars</title><para>here:</para></formalpara>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/etc/all.scss</programlisting>
<simpara>We have seen that this CSS file grows and it&#8217;s getting
harder to maintain. When you want to structurize your Stylesheets,
a better a location to save component vars in a structure,
<emphasis role="strong">the same structure</emphasis> of used by the framework.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/var/button/Button.scss</programlisting>
<simpara>(Since <literal>Ext.button.Button</literal> maps to <emphasis>/src/button/Button.js</emphasis>)</simpara>
</section>
<section id="_example_button">
<title>Example: Button</title>
<itemizedlist>
<listitem>
<simpara>
<literal>$button-default-base-color</literal>: the background color of a button.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$button-default-border-color</literal>: the border color of a button.
</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">packages/MyTheme/sass/var/button/Button.scss</emphasis></simpara>
<programlisting language="javascript" linenumbering="unnumbered">$button-default-base-color: green;
$button-default-border-color: blue;</programlisting>
<figure id="vars_buttonexample"><title>Button Example</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/vars_buttonexample.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/vars_buttonexample.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_overview_components_with_vars">
<title>Overview Components with vars</title>
<simpara>Note that components that inherit from
other components; will also inherit the styles
set by variables.</simpara>
<itemizedlist>
<listitem>
<simpara>
Ext.button.Button
</simpara>
</listitem>
<listitem>
<simpara>
Ext.container.ButtonGroup
</simpara>
</listitem>
<listitem>
<simpara>
Ext.menu.Menu
</simpara>
</listitem>
<listitem>
<simpara>
Ext.panel.Panel
</simpara>
</listitem>
<listitem>
<simpara>
Ext.panel.Table
</simpara>
</listitem>
<listitem>
<simpara>
Ext.panel.Tool
</simpara>
</listitem>
<listitem>
<simpara>
Ext.picker.Color
</simpara>
</listitem>
<listitem>
<simpara>
Ext.picker.Date
</simpara>
</listitem>
<listitem>
<simpara>
Ext.resizer.Splitter
</simpara>
</listitem>
<listitem>
<simpara>
Ext.slider.Multi
</simpara>
</listitem>
<listitem>
<simpara>
Ext.tab.Bar
</simpara>
</listitem>
<listitem>
<simpara>
Ext.tab.Tab
</simpara>
</listitem>
<listitem>
<simpara>
Ext.tip.Tip
</simpara>
</listitem>
<listitem>
<simpara>
Ext.toolbar.Paging
</simpara>
</listitem>
<listitem>
<simpara>
Ext.toolbar.Toolbar
</simpara>
</listitem>
<listitem>
<simpara>
Ext.tree.Panel
</simpara>
</listitem>
<listitem>
<simpara>
Ext.view.BoundList
</simpara>
</listitem>
<listitem>
<simpara>
Ext.window.MessageBox
</simpara>
</listitem>
<listitem>
<simpara>
Ext.window.Window
</simpara>
</listitem>
<listitem>
<simpara>
Ext.LoadMask
</simpara>
</listitem>
<listitem>
<simpara>
Ext.ProgressBar
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_form_components_with_vars">
<title>Form components with vars</title>
<itemizedlist>
<listitem>
<simpara>
Ext.form.field.Base
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Checkbox
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Display
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.HtmlEditor
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Radio
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Spinner
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.TextArea
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Trigger
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.CheckboxGroup
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.FieldSet
</simpara>
</listitem>
<listitem>
<simpara>
Ext.form.field.Spinner
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_grid_components_with_vars">
<title>Grid components with vars</title>
<itemizedlist>
<listitem>
<simpara>
Ext.grid.column.Action
</simpara>
</listitem>
<listitem>
<simpara>
Ext.grid.column.CheckColumn
</simpara>
</listitem>
<listitem>
<simpara>
Ext.grid.column.Column
</simpara>
</listitem>
<listitem>
<simpara>
Ext.grid.column.RowNumberer
</simpara>
</listitem>
<listitem>
<simpara>
Ext.grid.header.Container
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section id="_app_watch">
<title>App Watch</title>
<simpara>As an alternative to <literal>compass watch</literal>, Sencha Cmd has <literal>sencha app watch</literal>.
Run this command on the CLI and it starts polling for changes.
On every change made in the JavaScript or CSS, the system will auto build
the app for you.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sencha app watch</programlisting>
</section>
</chapter>
<chapter id="_lab_create_the_goggles_theme">
<title>Lab: Create the Goggles Theme</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Create a custom Sass stylesheet
</simpara>
</listitem>
<listitem>
<simpara>
Use Sencha variables
</simpara>
</listitem>
<listitem>
<simpara>
Compile Sass to CSS
</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Open with your editor the following file:</emphasis>
</simpara>
<simpara><emphasis>/packages/Goggles/sass/etc/all.scss</emphasis></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">On the top of your file, define the following set of variables</emphasis>
</simpara>
<example id="code4_vars">
<title>Sass variables</title>
<programlisting language="HTML" linenumbering="unnumbered">/* my variables */
$red: #d14836;
$gray: #f5f5f5;
$yellow: #ffff00;
$white: #fff;
$blue: #15c;</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Below your set of variables set the <literal>base-color</literal>, to <literal>$gray</literal></emphasis>:
</simpara>
<example id="code4_basecolor">
<title>The Sencha base-color variable</title>
<programlisting language="HTML" linenumbering="unnumbered">/* default styles */
$base-color: $gray;</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Compile your stylesheet</emphasis>
</simpara>
<simpara>On the CLI enter the following command from the <emphasis>extreader</emphasis> folder:</simpara>
<simpara><literal>sencha ant sass</literal></simpara>
<simpara>You can use this command everytime you want to test your stylesheet.
Just press the up key on the CLI to go back to your previous command.</simpara>
<simpara>With the new Sencha Cmd 4 version it&#8217;s possible
to watch your stylesheet for changes. Changes
in the Sass file will be automatically compiled to CSS files:
<literal>sencha app watch</literal></simpara>
</listitem>
<listitem>
<simpara>
*Verify your app looks like the image <xref linkend="lab4_goggles"/>
</simpara>
<figure id="lab4_goggles"><title>Preview of the Goggles theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-goggles1.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-goggles1.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open the API Docs</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS</ulink></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following Global_CSS variables</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
The <literal>neutral-color</literal> should be set to <literal>$gray</literal>
</simpara>
</listitem>
<listitem>
<simpara>
The default text color should be set to a 60% darker variant of gray. (<literal>darken($gray,60%)</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
The font should be set to <literal>Arial, sans-serif</literal>, with a fontsize of 13px.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Toolbars</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.toolbar.Toolbar</literal></simpara>
<simpara>Click on the <emphasis>CSS vars</emphasis> button and review the set of styles which are available for all toolbar components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Start with the comment: <literal>/* toolbars */</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Set the background color for the toolbar, to variable <literal>$gray</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Test your stylesheet; you should notice a gray top toolbar.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Buttons</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.button.Button</literal></simpara>
<simpara>Click on the <emphasis>CSS vars button</emphasis> and review the set of styles which are available for all button components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Start with the comment: <literal>/* buttons */</literal>
</simpara>
</listitem>
<listitem>
<simpara>
All buttons in the toolbar should have a background color <literal>$gray</literal> and a border color that is 10% darker then the normal <literal>$gray</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Both buttons, default and toolbar buttons should have the background-gradient set to the string: <literal><emphasis>none</emphasis></literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Set a padding to all small buttons to 8px.
</simpara>
</listitem>
<listitem>
<simpara>
All default buttons, should have a $red background color. over, pressed and focus buttons can have a 10% darker red background color.
</simpara>
</listitem>
<listitem>
<simpara>
All default buttons with a disabled state should have a 10% lighter color.
</simpara>
</listitem>
<listitem>
<simpara>
Compile and test your stylesheet, you should notice gray buttons in your toolbar. When you click on the subscribe button, you should see a form with a reddish button.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Panels</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.panel.Panel</literal></simpara>
<simpara>Click on the <emphasis>CSS vars</emphasis> button and review the set of styles which are available for all panel components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Start with the comment: <literal>/* panels */</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Set the border width of the frame to 0.
</simpara>
</listitem>
<listitem>
<simpara>
Set the body border width to 0.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Panel Headers</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.panel.Header</literal></simpara>
<simpara>Click on the <emphasis>CSS vars</emphasis> button; and review the set of styles which are available for all panel header components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Set the padding for the header to: 10px 5px
</simpara>
</listitem>
<listitem>
<simpara>
Set the header background-color to an 8% darker red.
</simpara>
</listitem>
<listitem>
<simpara>
Compile and test your stylesheet, you should see a tree panel with a red header.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Windows</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.window.Window</literal></simpara>
<simpara>Click on the <emphasis>CSS vars</emphasis> button and review the set of styles which are available for all window components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
The <literal>window-header</literal> padding should be set to 10px 5px;
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>window-header-background-color</literal> should be set to an 8% darker red.
</simpara>
</listitem>
<listitem>
<simpara>
Compile and test your stylesheet, when you click on the subscribe button, you should see a nice popup window with a reddish header.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open with your browser the API Docs for Grid Panels</emphasis>
</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/">http://docs.sencha.com/extjs/4.2.1/</ulink> and search for <literal>Ext.grid.Panel</literal></simpara>
<simpara>Click on the <emphasis>CSS vars</emphasis> button and review the set of styles which are available for all grid components.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the following vars</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
The grid header will get a border color of <literal>$white</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
The grid header will also get a padding of 12px 8px and a color that is 10% darker then the default gray.
</simpara>
</listitem>
<listitem>
<simpara>
Next step is to set the <literal>row-cell</literal> background color and the <literal>row-cell-alt</literal> background color both to a 3% darker gray.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>row-cell</literal> over color will be a 5% darker gray.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>row-cell</literal> border color will be a 10% darker gray
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>row-cell</literal> selected background-color, should be a 40% lighter yellow color.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>grid-cell-inner</literal> padding should be set to 8px.
</simpara>
</listitem>
<listitem>
<simpara>
Compile and test your stylesheet, you should see a nice gray styled grid.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">The last step is to create some custom styles for the tree panel</emphasis>
</simpara>
<simpara>As you can see, the tree is already styled. This is because the treepanel extends from <literal>Ext.panel.Table</literal> and <literal>Ext.panel.Table</literal>, therefore it reuses a lot of the same styles as the grid does. Let’s write our own custom styles</simpara>
<simpara>Take over the below CSS code and use Sass nesting
<ulink url="http://sass-lang.com/docs/yardoc/#nesting">http://sass-lang.com/docs/yardoc/#nesting</ulink> for readability:</simpara>
<example id="code4_nesting">
<title>Tree Panel code, take this code over and start nesting</title>
<programlisting language="HTML" linenumbering="unnumbered">.x-tree-panel .x-tree-icon,
.x-tree-panel .x-tree-elbow-img {
    display: none;
}
.x-tree-panel .x-grid-cell {
    background: $white;
}

.x-tree-panel .x-grid-row-selected .x-grid-td {
    background: white;
}
.x-tree-panel .x-grid-row-selected .x-tree-node-text {
    font-weight: bold;
}
.x-tree-panel .x-grid-row-selected {
    color: red;
}</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Compile and preview your stylessheet</emphasis>
</simpara>
<simpara>By now you should see your own custom tree panel, with white background cells. If you want to take a peek into the solution files, check the following file: <emphasis>/packages/Lab4Solution/sass/etc/all.scss</emphasis>
When you want to test this solution theme, just switch themes in your <emphasis>extreader/.sencha/app/sencha.cfg</emphasis>, set <literal>app.theme</literal> to <literal>Lab4Solution</literal> (<literal>app.theme=Lab4Solution</literal>) and run a <literal>sencha app build</literal>.</simpara>
</listitem>
</orderedlist>
<figure id="lab4_goggles2"><title>Preview of the Goggles theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-goggles2.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-goggles2.png</phrase></textobject>
</mediaobject>
</figure>
</chapter>
<chapter id="_sencha_mixins">
<title>Sencha Mixins</title>
<section id="_objectives_7">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Implementing Panel UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implementing Toolbar UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implementing Window UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implementing Button UIs
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_introduction_2">
<title>Introduction</title>
<simpara>As we learned from the lecture, Sass mixins can be very handy:</simpara>
<example id="mixins_snippet">
<title>Maintain the variables on one place.</title>
<programlisting language="javascript" linenumbering="unnumbered">@mixin custom-button-ui($color) {
        background-color: $color;
        &amp;:hover {
                background-color: lighten($color, 20%);
        }
}

.x-btn.custom {
        @include custom-button-ui(red)
}</programlisting>
</example>
<example id="mixins_snippet2">
<title>Compile the Sass Stylesheet for CSS output</title>
<programlisting language="javascript" linenumbering="unnumbered">.x-btn.custom { background-color: red; }
.x-btn.custom:hover{ background-color: #ff6666; }</programlisting>
</example>
</section>
<section id="_sencha_uis">
<title>Sencha UIs</title>
<simpara>Sencha has their own Sass mixins set in the <emphasis role="strong">Neutral</emphasis> theme.
Therefore we can use these mixins (sencha uis) to customize our own
skins.</simpara>
<simpara>For example, Sencha UIs can be handy for when you have a <emphasis role="strong">blue</emphasis> Neptune theme
and only some toolbars needs to be <emphasis role="strong">green</emphasis> instead of blue.</simpara>
<figure id="mixins_kitchensink"><title>Example of a Toolbar UI</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mixins_kitchensink.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/mixins_kitchensink.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_mixin_vs_css_overwrite">
<title>Mixin vs CSS overwrite</title>
<formalpara><title>In the previous example you could choose to use the toolbar mixin (<literal>extjs-toolbar-ui</literal>).</title><para>
<programlisting language="javascript" linenumbering="unnumbered">extjs-toolbar-ui(
        'greentoolbar',
         $background-color: 'green'
         //more configs
);</programlisting>
</para></formalpara>
<formalpara><title>To implement the mixin in your view code:</title><para>
<programlisting language="javascript" linenumbering="unnumbered">{
        xtype: 'toolbar',
        ui: 'greentoolbar',
        //more configs
}</programlisting>
</para></formalpara>
<formalpara><title>The other solution would be to use a CSS overwrite</title><para>
<programlisting language="javascript" linenumbering="unnumbered">.green {
        background: 'green';
}</programlisting>
</para></formalpara>
<formalpara><title>To implement the CSS overwrite in your view code:</title><para>
<programlisting language="javascript" linenumbering="unnumbered">{
        xtype: 'toolbar',
        cls: 'green',
        //more configs
}</programlisting>
</para></formalpara>
<section id="_sencha_ui">
<title>Sencha UI</title>
<itemizedlist><title>Advantages</title>
<listitem>
<simpara>
Creates a new skin
</simpara>
</listitem>
<listitem>
<simpara>
Set every CSS rule for this specific component
</simpara>
</listitem>
<listitem>
<simpara>
Automatically cross browser compatible
.Disadvantages
</simpara>
</listitem>
<listitem>
<simpara>
Can increase the file size of your CSS
</simpara>
</listitem>
<listitem>
<simpara>
Can be difficult to implement
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_css_overwrite_on_class_name">
<title>CSS overwrite on class name</title>
<itemizedlist><title>Advantages</title>
<listitem>
<simpara>
Easy solution
</simpara>
</listitem>
<listitem>
<simpara>
Won&#8217;t increase the CSS much
.Disadvantages
</simpara>
</listitem>
<listitem>
<simpara>
Overwrites are visible in the compiled CSS
</simpara>
</listitem>
<listitem>
<simpara>
Hard to maintain
</simpara>
</listitem>
<listitem>
<simpara>
You will need to understand the Ext JS DOM
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_conclusion">
<title>Conclusion</title>
<formalpara><title>What to use?</title><para><emphasis role="strong">Sencha UI</emphasis> mixins are great when these are repetitive used in your theme.
<emphasis>For example: a blue theme, that has blue and red buttons.</emphasis>
<emphasis role="strong">CSS overwrites</emphasis> are handy to make a certain component unique.
<emphasis>For example: on the start screen, the <emphasis role="strong">new</emphasis> button is bigger and has a different color.</emphasis></para></formalpara>
</section>
</section>
<section id="_mixins_2">
<title>Mixins</title>
<itemizedlist><title>Like variables, there are two types of mixins.</title>
<listitem>
<simpara>
Global Mixins
</simpara>
</listitem>
<listitem>
<simpara>
Component Mixins
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_global_mixins">
<title>Global Mixins</title>
<simpara>But there is just one global mixin&#8230;</simpara>
<figure id="mixins_globalcss"><title>Global CSS Mixin</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mixin_globalcss.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/mixin_globalcss.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><ulink url="http://localhost/extjs4.2.2/docs/#!/api/Global_CSS">http://localhost/extjs4.2.2/docs/#!/api/Global_CSS</ulink></simpara>
<section id="_where_to_implement_3">
<title>Where to implement</title>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/etc/all.scss</programlisting>
</section>
<section id="_mixin_background_gradient">
<title>Mixin: Background-gradient</title>
<itemizedlist>
<listitem>
<simpara>
bg-color: HEX color code
</simpara>
</listitem>
<listitem>
<simpara>
gradient: Choose gradient type from list (see docs)
</simpara>
</listitem>
<listitem>
<simpara>
direction: (optional) left or top.
</simpara>
</listitem>
</itemizedlist>
<programlisting language="javascript" linenumbering="unnumbered">.app {
     @include background-gradient(#808080, matte, left);
}</programlisting>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_mixin-background-gradient">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_mixin-background-gradient</ulink></simpara>
</section>
</section>
<section id="_component_mixins">
<title>Component mixins</title>
<itemizedlist><title>The following Ext components have their own mixins:</title>
<listitem>
<simpara>
<literal>Ext.button.Button</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.container.ButtonGroup</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.panel.Panel</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.tab.Panel</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.tab.Bar</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.tab.Tab</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.tip.Tip</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.toolbar.Toolbar</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.window.Window</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Ext.ProgressBar</literal>
</simpara>
</listitem>
</itemizedlist>
<section id="_where_to_implement_4">
<title>Where to implement</title>
<formalpara><title>In the labs we saved all our styles and vars here:</title><para>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/etc/all.scss</programlisting>
</para></formalpara>
<simpara>We have seen that this file grows and it&#8217;s getting
harder to maintain. When you want to structure your Stylesheets,
a better a location to save global vars would be:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">packages/&lt;theme-name&gt;/sass/src/Component.scss</programlisting>
</section>
<section id="_api_docs_3">
<title>API Docs</title>
<simpara>You can figure out how to configure the mixins by checking the API Docs.</simpara>
<figure id="mixins_components"><title>Component Mixins in API Docs</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/mixin_component_apidocs.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/mixin_component_apidocs.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_mixin_panel_ui">
<title>Mixin: Panel UI</title>
<simpara>packages/&lt;theme-name&gt;/sass/src/panel/Panel.scss</simpara>
<formalpara><title>Example code to configure a Panel UI mixin.</title><para>
<programlisting language="javascript" linenumbering="unnumbered">@mixin extjs-panel-ui(
   $ui-label,
   $ui-border-color: $panel-border-color,
      $ui-border-radius: $panel-border-radius,
      $ui-border-width: $panel-border-width,
   $ui-padding: 0,
   $ui-header-color: $panel-header-color,
      $ui-header-font-family: $panel-header-font-family,
      $ui-header-font-size: $panel-header-font-size,
      $ui-header-font-weight: $panel-header-font-weight,
      $ui-header-line-height: $panel-header-line-height,
      $ui-header-border-color: $panel-header-border-color,
      $ui-header-border-width: $panel-header-border-width,
      $ui-header-border-style: $panel-header-border-style,
      $ui-header-background-color: $panel-header-background-color,
      $ui-header-background-gradient: $panel-header-background-gradient,
      $ui-header-inner-border-color: $panel-header-inner-border-color,
      $ui-header-inner-border-width: $panel-header-inner-border-width,
      $ui-header-text-padding: $panel-header-text-padding,
      $ui-header-text-transform: $panel-header-text-transform,
      $ui-header-padding: $panel-header-padding,
      $ui-header-icon-width: $panel-header-icon-width,
      $ui-header-icon-height: $panel-header-icon-height,
      $ui-header-icon-spacing: $panel-header-icon-spacing,
      $ui-header-icon-background-position: $panel-header-icon-background-position,
      $ui-header-glyph-color: $panel-header-glyph-color,
      $ui-header-glyph-opacity: $panel-header-glyph-opacity,
   $ui-tool-spacing: $panel-tool-spacing,
     $ui-tool-background-image: $panel-tool-background-image,
   $ui-body-color: $panel-body-color,
     $ui-body-border-color: $panel-body-border-color,
     $ui-body-border-width: $panel-body-border-width,
     $ui-body-border-style: $panel-body-border-style,
      $ui-body-background-color: $panel-body-background-color,
      $ui-body-font-size: $panel-body-font-size,
      $ui-body-font-weight: $panel-body-font-weight,
   $ui-background-stretch-top: $panel-background-stretch-top,
      $ui-background-stretch-bottom: $panel-background-stretch-bottom,
      $ui-background-stretch-right: $panel-background-stretch-right,
      $ui-background-stretch-left: $panel-background-stretch-left,
   $ui-include-border-management-rules: $panel-include-border-management-rules,
   $ui-wrap-border-color: $panel-wrap-border-color,
   $ui-wrap-border-width: $panel-wrap-border-width
);</programlisting>
</para></formalpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.panel.Panel-css_mixin-extjs-panel-ui">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.panel.Panel-css_mixin-extjs-panel-ui</ulink></simpara>
</section>
<section id="_mixin_window_ui">
<title>Mixin: Window UI</title>
<simpara>packages/&lt;theme-name&gt;/sass/src/window/Window.scss</simpara>
<formalpara><title>Example code to configure a Window UI mixin.</title><para>
<programlisting language="javascript" linenumbering="unnumbered">@mixin extjs-window-ui(
   $ui-label,
   $ui-padding: $window-padding,
   $ui-border-radius: $window-border-radius,
      $ui-border-color: $window-border-color,
      $ui-border-width: $window-border-width,
      $ui-inner-border-color: $window-inner-border-color,
      $ui-inner-border-width: $window-inner-border-width,
   $ui-header-color: $window-header-color,
      $ui-header-background-color: $window-header-background-color,
      $ui-header-padding: $window-header-padding,
      $ui-header-font-family: $window-header-font-family,
      $ui-header-font-size: $window-header-font-size,
      $ui-header-font-weight: $window-header-font-weight,
      $ui-header-line-height: $window-header-line-height,
      $ui-header-text-padding: $window-header-text-padding,
      $ui-header-text-transform: $window-header-text-transform,
      $ui-header-border-color: $ui-border-color,
      $ui-header-border-width: $window-header-border-width,
      $ui-header-inner-border-color: $window-header-inner-border-color,
      $ui-header-inner-border-width: $window-header-inner-border-width,
   $ui-header-icon-width: $window-header-icon-width,
      $ui-header-icon-height: $window-header-icon-height,
      $ui-header-icon-spacing: $window-header-icon-spacing,
      $ui-header-icon-background-position: $window-header-icon-background-position,
      $ui-header-glyph-color: $window-header-glyph-color,
      $ui-header-glyph-opacity: $window-header-glyph-opacity,
   $ui-tool-spacing: $window-tool-spacing,
      $ui-tool-background-image: $window-tool-background-image,
   $ui-body-border-color: $window-body-border-color,
      $ui-body-background-color: $window-body-background-color,
      $ui-body-border-width: $window-body-border-width,
      $ui-body-border-style: $window-body-border-style,
      $ui-body-color: $window-body-color,
   $ui-background-color: $window-background-color,
   $ui-force-header-border: $window-force-header-border,
   $ui-include-border-management-rules: $window-include-border-management-rules,
   $ui-wrap-border-color: $window-wrap-border-color,
   $ui-wrap-border-width: $window-wrap-border-width
);</programlisting>
</para></formalpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.window.Window-css_mixin-extjs-window-ui">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.window.Window-css_mixin-extjs-window-ui</ulink></simpara>
</section>
<section id="_mixin_toolbar_ui">
<title>Mixin: Toolbar UI</title>
<simpara>packages/&lt;theme-name&gt;/sass/src/toolbar/Toolbar.scss</simpara>
<formalpara><title>Example code to configure a Toolbar UI mixin.</title><para>
<programlisting language="javascript" linenumbering="unnumbered">@mixin extjs-toolbar-ui
   $ui,
   $background-color: $toolbar-background-color,
      $background-gradient: $toolbar-background-gradient,
   $border-color: $toolbar-border-color,
      $border-width: $toolbar-border-width,
   $scroller-cursor: $toolbar-scroller-cursor,
      $scroller-cursor-disabled: $toolbar-scroller-cursor-disabled,
      $scroller-opacity-disabled: $toolbar-scroller-opacity-disabled,
   $tool-background-image: $toolbar-tool-background-image
);</programlisting>
</para></formalpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.toolbar.Toolbar-css_mixin-extjs-toolbar-ui">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.toolbar.Toolbar-css_mixin-extjs-toolbar-ui</ulink></simpara>
</section>
<section id="_button_uis">
<title>Button UIs</title>
<itemizedlist><title>Different types of Button UIs</title>
<listitem>
<simpara>
$extjs-button-large-ui
</simpara>
</listitem>
<listitem>
<simpara>
$extjs-button-medium-ui
</simpara>
</listitem>
<listitem>
<simpara>
$extjs-button-small-ui
</simpara>
</listitem>
<listitem>
<simpara>
$extjs-button-toolbar-large-ui
</simpara>
</listitem>
<listitem>
<simpara>
$extjs-button-toolbar-medium-ui
</simpara>
</listitem>
<listitem>
<simpara>
$extjs-button-toolbar-small-ui
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_extjs_button_ui">
<title>extjs-button-ui</title>
<itemizedlist><title>Default Button UI</title>
<listitem>
<simpara>
<literal>$extjs-button-ui</literal>
Note: this mixin is not scale aware and therefore less common.
By default the <literal>scale</literal> config in an <literal>Ext.button.Button</literal> defaults to <literal>small</literal>.
Which will use the <literal>$extjs-button-small-ui</literal>.
Also the <literal>$extjs-button-ui</literal> mixin has more more required arguments.
</simpara>
</listitem>
</itemizedlist>
<simpara>packages/&lt;theme-name&gt;/sass/src/button/Button.scss</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button-css_mixin-extjs-button-ui">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button-css_mixin-extjs-button-ui</ulink></simpara>
</section>
</section>
</chapter>
<chapter id="_lab_creating_custom_uis">
<title>Lab: Creating Custom UIs</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Implement Button UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implement Panel UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implement Toolbar UIs
</simpara>
</listitem>
<listitem>
<simpara>
Implement Window UIs
</simpara>
</listitem>
</itemizedlist>
<section id="_button_ui_8217_s">
<title>Button UI&#8217;s</title>
<simpara>See API Docs: <ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.button.Button</ulink></simpara>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Create a new file Component.scss</emphasis>
</simpara>
<simpara>Create this file in <emphasis>packages/Goggles/sass/src</emphasis></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the button mixin extjs-button-small-ui</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Give this mixin the name: <emphasis>blue</emphasis> (<literal>$ui</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
Give this mixin the following background <literal>$background-color: lighten($blue, 20%)</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Give this mixin a background over color, a 10% darker <literal>$blue</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Give this mixin the background disabled color, a 40% lighter <literal>$blue</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Set the <literal>border-radius</literal> to 4px
</simpara>
</listitem>
<listitem>
<simpara>
Set the <literal>color</literal> to white
</simpara>
</listitem>
<listitem>
<simpara>
Set the <literal>glyph-color</literal> to white
</simpara>
</listitem>
<listitem>
<simpara>
Set the <literal>padding</literal> to 4px
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Copy and paste the previous mixin and change the mixin to ext-button-medium-ui</emphasis>
</simpara>
<simpara>The difference is the <literal>border-radius</literal>, which should be set to 5px and the <literal>padding</literal> which should be set to 6px.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Copy and paste the previous mixin and change the mixin to ext-button-toolbar-medium-ui</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Copy and paste the previous mixin and change the mixin to ext-button-large-ui</emphasis>
The difference is the <literal>border-radius</literal>, which should be set to 6px and the <literal>padding</literal> which should be set to 8px.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Assign the <literal>blue</literal> button mixin to the previous and next buttons</emphasis>
</simpara>
<simpara>Open <emphasis>app/view/Viewport</emphasis>, on the place indicated by the comment (the previous and next buttons), add the <literal>ui: <emphasis>blue</emphasis></literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Assign the <literal>blue</literal> button mixin to the OK button</emphasis>
Open <emphasis>app/view/Header.js</emphasis>, on the place indicated by the comment (the OK button of the messagebox), add the <literal>ui: <emphasis>blue</emphasis></literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Navigate on the CLI to the project folder</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the application</emphasis>
</simpara>
<simpara>Make sure your app is automatically compiling to CSS by running the following command on the CLI <literal>sencha app watch</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Preview your application</emphasis>
</simpara>
<simpara>You should see blue previous and next buttons in the bottom toolbar. You should also see a blue <emphasis>OK</emphasis> button, when pressing the <emphasis>Help &gt; About</emphasis> button.</simpara>
</listitem>
</orderedlist>
</section>
<section id="_panel_uis">
<title>Panel UIs</title>
<simpara>See API DOCS: <ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.panel.Panel">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.panel.Panel</ulink></simpara>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Create the following mixin for Panels, see <xref linkend="code6_panelui"/></emphasis>
</simpara>
<example id="code6_panelui">
<title>Create a new UI for panels</title>
<programlisting language="HTML" linenumbering="unnumbered">@include extjs-panel-ui(
    'light',
    $ui-header-color: lighten(#15c, 20%),
    $ui-header-background-color: #fff,
    $ui-header-line-height: 14px,
    $ui-header-font-size: 12px,
    $ui-header-font-weight: bold,

    $ui-border-color: #fff,
    $ui-border-radius: 4px,
    $ui-body-background-color: #fff,
    $ui-body-font-size: 14px,

    $ui-padding: 10px
);</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Assign the <literal>light</literal> panel mixin to the feed panel</emphasis>
</simpara>
<simpara>Open <emphasis>app/view/Viewport.js</emphasis>, on the place indicated by the comment (the feed panel), add the <literal>ui: <emphasis>light</emphasis></literal>.</simpara>
</listitem>
</orderedlist>
</section>
<section id="_toolbar_uis">
<title>Toolbar UIs</title>
<simpara>See API DOCS: <ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.toolbar.Toolbar">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.toolbar.Toolbar</ulink></simpara>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Create the following mixin for Toolbars, see <xref linkend="code6_toolbarui"/></emphasis>
</simpara>
<example id="code6_toolbarui">
<title>Create a new UI for toolbars</title>
<programlisting language="HTML" linenumbering="unnumbered">@include extjs-toolbar-ui(
    'gray',
    $background-color: lighten($gray, 10%),
    $border-width: 0
);</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Assign the <literal>gray</literal> toolbar mixin to the toolbar</emphasis>
</simpara>
<simpara>Open <emphasis>app/view/Viewport.js</emphasis>, on the place indicated by the comment (the toolbar), add the <literal>ui: <emphasis>gray</emphasis></literal>.</simpara>
</listitem>
</orderedlist>
</section>
<section id="_window_uis">
<title>Window UIs</title>
<simpara>See API DOCS: <ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.window.Window-css_mixin-extjs-window-ui">http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.window.Window-css_mixin-extjs-window-ui</ulink></simpara>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Create the following mixin for Windows, see <xref linkend="code6_windowui"/></emphasis>
</simpara>
<example id="code6_windowui">
<title>Create a new UI for toolbars</title>
<programlisting language="HTML" linenumbering="unnumbered">@include extjs-window-ui(
    'blue',

    $ui-header-font-size: 12px,
    $ui-header-font-weight: bold,
    $ui-header-color: #fff,
    $ui-header-background-color: lighten(#15c, 20%),

    $ui-border-color: #fff,
    $ui-border-radius: 4px,
    $ui-body-background-color: #fff
);</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Assign the <literal>blue</literal> window mixin to the messagebox</emphasis>
</simpara>
<simpara>Open <emphasis>app/view/Header.js</emphasis>, on the place indicated by the comment (the messagebox), add the <literal>ui: <emphasis>blue</emphasis></literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Preview the application</emphasis>
Your ExtReader app should have the looks of <xref linkend="lab6_uis"/>.
</simpara>
<figure id="lab6_uis"><title>Preview of the Goggles with custom UIs</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-uis.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-uis.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter id="_implementing_assets">
<title>Implementing assets</title>
<section id="_objectives_8">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn how to implement images
</simpara>
</listitem>
<listitem>
<simpara>
Lean about paths to resources
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to implement custom fonts
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to implement custom icons
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_implementing_images">
<title>Implementing Images</title>
<itemizedlist><title>There are a couple of ways of implementing images in Ext JS</title>
<listitem>
<simpara>
Implementing an image by using the <literal>html</literal> tag.
Easy but dirty.
</simpara>
</listitem>
<listitem>
<simpara>
Implementing an image by using <literal>Ext.Img</literal> class.
Very powerful.
</simpara>
</listitem>
<listitem>
<simpara>
Implementing a background image in the CSS
Structured.
</simpara>
</listitem>
</itemizedlist>
<section id="_folder_structure">
<title>Folder structure</title>
<simpara>Where to save the images?</simpara>
<simpara>When app specific:
<emphasis>[workspace]/resources/</emphasis> folder.</simpara>
<simpara>When global theme:
<emphasis>[workspace]/packages/[theme]/resources/</emphasis> folder.</simpara>
</section>
<section id="_image_html_tag">
<title>Image HTML tag</title>
<programlisting language="javascript" linenumbering="unnumbered">items: [{
    xtype: 'container',
    html: '&lt;img src="resources/logo.png" height="25" alt="ExtReader"/&gt;'
}]</programlisting>
</section>
<section id="_image_ext_img_class">
<title>Image Ext.Img class</title>
<programlisting language="javascript" linenumbering="unnumbered">items:[{
        xtype: 'image',
    src: 'resources/logo.png',
    alt: 'ExtReader',
    height: 25
}]</programlisting>
</section>
<section id="_background_image_in_css">
<title>Background image in CSS</title>
<formalpara><title>In Ext JS view:</title><para>
<programlisting language="javascript" linenumbering="unnumbered">items: [{
    xtype: 'container',
    cls: 'mybackground'
}]</programlisting>
</para></formalpara>
<formalpara><title>In Sass:</title><para>
<programlisting language="javascript" linenumbering="unnumbered">.mybackground {
        background: #fff url('background.png') repeat-x;
}</programlisting>
</para></formalpara>
</section>
<section id="_paths_to_resources">
<title>Paths to resources</title>
<simpara>You don&#8217;t need to worry about paths to images in Ext JS since it&#8217;s part of the application build process.</simpara>
<simpara>When building the app, the global theme images and the app specific images will be automatically copied over to the resources build folder. <emphasis>(build/[appname]/resources)</emphasis></simpara>
<simpara>Note: subfolders will be copied too!</simpara>
</section>
<section id="_paths_global">
<title>Paths global</title>
<programlisting language="javascript" linenumbering="unnumbered">/* red image: resources/backgrounds/red.png */
.bgred {
        background: url('backgrounds/red.png') repeat-x;
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">/* yellow image: resources/yellow.png */
.footer {
        background: url('yellow.png');
}</programlisting>
<figure id="assets_1"><title>Paths to global resources</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_appresources.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_appresources.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_paths_app_specific">
<title>Paths app specific</title>
<programlisting language="javascript" linenumbering="unnumbered">/* blue image: packages/[mytheme]/resources/backgrounds/blue.png */
.bgblue {
        background: url('backgrounds/blue.png') repeat-x;
}</programlisting>
<figure id="assets_2"><title>Paths to app specific resources</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_globalresources.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_globalresources.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_paths_in_build">
<title>Paths in build</title>
<simpara>Images saved in <emphasis>packages/[mytheme]/resources</emphasis>
and images saved in <emphasis>[myapp]/resources/</emphasis>.
will be copied to the <emphasis>build/[appname]/resources</emphasis> folder.</simpara>
<figure id="assets_3"><title>Paths to all resources after build.</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_buildfolder.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_buildfolder.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_paths_to_resources_2">
<title>Paths to resources</title>
<simpara>Under the roots, this happens also with paths in <literal>Ext.Img</literal> classes and image tags and other resources such as fonts.</simpara>
<simpara>However, while developing you would point images to the <emphasis>/resources/</emphasis> folder, since you don&#8217;t want to build every time while developing.
Once you build, Sencha Cmd will take care.</simpara>
</section>
<section id="_base64_encode_instead">
<title>Base64 encode instead</title>
<simpara>Images can be saved to Base64 strings. (Binary to ASCII Text).
It&#8217;s a technique what&#8217;s been used for years for sending email
image attachments. When you are not familiair with Base64 strings, they look like these:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">data:image/png;base64,&lt;LONG BASE64 STRING WITH ENCODED DATA&gt;"</programlisting>
<simpara>An advantage of a string like this, is that you can cache it,
maybe you want to save it in a database.
Instead of an URL to a path you pass in the Base-64 string.</simpara>
</section>
<section id="_overriding_images">
<title>Overriding images</title>
<simpara>When you are extending from other themes, some components contain images that are
inherited from a parent theme.</simpara>
<simpara>In some cases you may need to override an image. This can be easily done by placing the desired image in <emphasis>packages/[mytheme]/resources/images/</emphasis> and giving it the <emphasis role="strong">same name</emphasis> as the image it is intended to override.</simpara>
<simpara>For example, let&#8217;s change the info icon of the MessageBox component. Save the following image as <emphasis>packages/[mytheme]/resources/images/shared/icon-info.png</emphasis>
=== Implementing custom fonts
.The following steps are required to implement a custom font.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Download a font-face kit
</simpara>
</listitem>
<listitem>
<simpara>
Create <emphasis>fonts</emphasis> folder in resources folder.
</simpara>
</listitem>
<listitem>
<simpara>
Implement font in Sass
</simpara>
</listitem>
<listitem>
<simpara>
Assign font
</simpara>
</listitem>
<listitem>
<simpara>
Build
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_about_font_face">
<title>About @font-face</title>
<simpara><literal>@font-face</literal> is a CSS technique used nowadays to implement custom
web fonts. Where with system fonts it picks the font if available in your OS, <literal>@font-face</literal> downloads the font from the Internet.</simpara>
<simpara>Unfortunately the major browsers can&#8217;t come up with one web font solution. Therefore you have to embed multiple web font extensions
into your Stylesheet. See <xref linkend="styles_fontfaceoverview"/>.</simpara>
</section>
<section id="_compatibility">
<title>Compatibility</title>
<table id="styles_fontfaceoverview"
frame="all"
rowsep="1" colsep="1"
>
<title>Cross-browser compatibility overview of font-face</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Browser             </entry>
<entry align="left" valign="top">TTF</entry>
<entry align="left" valign="top">EOT</entry>
<entry align="left" valign="top">WOFF</entry>
<entry align="left" valign="top">SVG</entry>
</row>
</thead>
<tfoot>
<row>
<entry align="left" valign="top"><simpara>Firefox</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
</row>
</tfoot>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Google Chrome</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Safari</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Mobile Safari</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IE10</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Android Browser</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>BlackBerry Browser</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>_</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
<entry align="left" valign="top"><simpara>X</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section id="_where_to_get_fonts_from">
<title>Where to get fonts from?</title>
<itemizedlist><title>Download an <literal>@font-face</literal> kit</title>
<listitem>
<simpara>
<ulink url="http://www.fontsquirrel.com/">http://www.fontsquirrel.com/</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://www.fontex.org/">http://www.fontex.org/</ulink>
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>A font service:</title>
<listitem>
<simpara>
<ulink url="http://www.google.com/fonts">http://www.google.com/fonts</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="https://typekit.com/">https://typekit.com/</ulink>
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_implement_font_in_sass">
<title>Implement font in Sass</title>
<programlisting language="javascript" linenumbering="unnumbered">@font-face {
    font-family: 'DroidSansBold';
    src: url('../resources/fonts/DroidSans-Bold-webfont.eot');
    src: url('../resources/fonts/DroidSans-Bold-webfont.eot?#iefix') format('embedded-opentype'),
         url('../resources/fonts/DroidSans-Bold-webfont.woff') format('woff'),
         url('../resources/fonts/DroidSans-Bold-webfont.ttf') format('truetype'),
         url('../resources/fonts/DroidSans-Bold-webfont.svg#DroidSansBold') format('svg');
    font-weight: normal;
    font-style: normal;
}</programlisting>
</section>
<section id="_base64_for_fonts">
<title>Base64 for fonts!</title>
<simpara>Yes it&#8217;s possible to Base64 encode fonts!</simpara>
<simpara>To get a Base64 font, upload and encode every font extension
to an encoder:</simpara>
<simpara><ulink url="http://www.opinionatedgeek.com/dotnet/tools/base64encode/">http://www.opinionatedgeek.com/dotnet/tools/base64encode/</ulink></simpara>
<simpara>It will present you the Base64 for each font file.
These Base64 strings you can implement in your Sass.</simpara>
</section>
<section id="_base64_font_example">
<title>Base64 font example</title>
<programlisting language="javascript" linenumbering="unnumbered">@font-face{
 font-family: "DroidSansBold";
 src: url(data:font/tff;base64,&lt;here&gt;) format('TrueType'),
        url(data:font/svg;base64,&lt;here&gt;) format('svg'),
        url(data:font/eot;base64,&lt;here&gt;) format('eot'),
        url(data:font/woff;base64,&lt;here&gt;) format('woff');
}</programlisting>
</section>
<section id="_assign_font">
<title>Assign font</title>
<simpara>Set a CSS class on a component, to target it from the CSS.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.mycomponent {
    font-family: 'DroidSansRegular';
    line-height: 1.6em;
}</programlisting>
</section>
<section id="_px_or_em">
<title>Px or Em ?</title>
<simpara><emphasis role="strong">Pixels</emphasis>
Pixels (px) are fixed-size units that are used in screen media. One pixel is equal to one dot on the computer screen (the smallest division of your screen’s resolution). Many web designers use pixel units in web documents in order to produce a pixel-perfect representation of their site as it is rendered in the browser.</simpara>
<simpara><emphasis role="strong">Ems</emphasis>
"Ems" (em): The <emphasis>em</emphasis> is a scalable unit that is used in web document media. An em is equal to the current font-size, for instance, if the font-size of the document is 16px, 1em is equal to 16px. Ems are scalable in nature, so 2em would equal 32px, .5em would equal 8px, etc.</simpara>
<simpara>In theory, using em instead of px will allow the layout to re-size more easily based on user preferences. But nowadays, modern browsers can resize px layouts as well as em layouts so it might not be as relevant as it was some years ago.</simpara>
</section>
<section id="_px_ems_converters">
<title>Px / Ems converters</title>
<simpara>When you think the calculation of ems is annoying&#8230;
Let&#8217;s Sass calculate it for you!</simpara>
<formalpara><title>Example em mixin and px mixin</title><para>
<programlisting language="javascript" linenumbering="unnumbered">@function em($target, $context: $base-font-size-em) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0em;
}

@function px($target, $context: $base-font-size) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0px;
}
$base-font-size: 15px;</programlisting>
</para></formalpara>
</section>
<section id="_build">
<title>Build</title>
<simpara>A <literal>build</literal> process is required in order to see the newly implemented fonts. This will copy and link the fonts to the build folder.</simpara>
<simpara><literal>sencha app build</literal>
=== Implementing Glyps and Icons
.The following steps are required to implement a custom icon font.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Choose an icon font
</simpara>
</listitem>
<listitem>
<simpara>
Create a font pack
</simpara>
</listitem>
<listitem>
<simpara>
Download the icon font.
</simpara>
</listitem>
<listitem>
<simpara>
Implement icon font in Sass
</simpara>
</listitem>
<listitem>
<simpara>
Assign icon font
</simpara>
</listitem>
<listitem>
<simpara>
Build
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_about_icon_fonts">
<title>About icon fonts</title>
<simpara>Icons delivered as a font file and mapped to (HEX) character codes.
Icon font can be embedded with CSS like any other custom font.</simpara>
</section>
<section id="_icon_fonts_why">
<title>Icon fonts why?</title>
<itemizedlist><title>Why icon fonts?</title>
<listitem>
<simpara>
Icon Fonts are vectors.
Icons can easily change size and they are always best quality.
Perfect on Retina displays.
</simpara>
</listitem>
<listitem>
<simpara>
No need for Photoshop
Icon Fonts can change colors, shades, contrasts and have no background.
Customizable with CSS
</simpara>
</listitem>
<listitem>
<simpara>
Screen reader compatible
Font icons won&#8217;t spam your screen reader.
No additional markup is required.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_where_to_get_icon_fonts_from">
<title>Where to get icon fonts from?</title>
<simpara><ulink url="http://icomoon.io/app">http://icomoon.io/app</ulink>
<ulink url="http://www.pictos.cc">http://www.pictos.cc</ulink>
<ulink url="http://fontello.com/">http://fontello.com/</ulink>
<ulink url="http://fortawesome.github.io/Font-Awesome/">http://fortawesome.github.io/Font-Awesome/</ulink></simpara>
<simpara>Convert text to unicodes:
<ulink url="http://www.branah.com/unicode-converter">http://www.branah.com/unicode-converter</ulink></simpara>
</section>
<section id="_create_a_font">
<title>Create a font</title>
<itemizedlist><title>Create your own font by selecting icons.</title>
<listitem>
<simpara>
Set character and unicode to the every icon.
</simpara>
</listitem>
<listitem>
<simpara>
Set default font metrics (for example 16px)
</simpara>
</listitem>
<listitem>
<simpara>
Give the font a name
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_example_icomoon">
<title>Example: IcoMoon</title>
<figure id="styles_createfontpack1"><title>Create your own custom font with IcoMoon.io</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_createfontpack.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_createfontpack.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="styles_createfontpack2"><title>Create your own custom font with IcoMoon.io</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_createfontpack2.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_createfontpack2.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_example_fontello">
<title>Example: Fontello</title>
<figure id="styles_createfontpack3"><title>Create your own custom font with Fontello.com</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/assets_createfontpack3.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/assets_createfontpack3.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_implement_icon_font_in_sass">
<title>Implement icon font in Sass</title>
<simpara>This works exact the same as implementing any other font.</simpara>
<simpara>Sometimes the CSS file is included with the font kit download.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">@font-face {
  font-family: 'MyFont';
  src: url('font/myfont.eot?22334');
  src: url('font/myfont.eot?22334#iefix') format('embedded-opentype'),
       url('font/myfont.woff?22334') format('woff'),
       url('font/myfont.ttf?22334') format('truetype'),
       url('font/myfont.svg?22334#myfont') format('svg');
  font-weight: normal;
  font-style: normal;
}</programlisting>
<simpara>Again don&#8217;t worry about the paths, since it will be part of the build process.</simpara>
</section>
<section id="_about_glyphs">
<title>About Glyphs</title>
<itemizedlist><title>To assign custom icons to Ext JS components you can use the <literal>glyph</literal> config.</title>
<listitem>
<simpara>
Specify the decimal code that maps to the unicode character
you choose while you&#8217;ve created the font pack.
You can convert the character to a decimal with converters:
<ulink url="http://www.branah.com/unicode-converter">http://www.branah.com/unicode-converter</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
Specify the name of the font.
</simpara>
</listitem>
</itemizedlist>
<programlisting language="HTML" linenumbering="unnumbered">glyph: '115@MyFont',</programlisting>
</section>
<section id="_more_about_glyphs">
<title>More about Glyphs</title>
<simpara>When no font is specified, the Pictos icon font will be used.</simpara>
<programlisting language="HTML" linenumbering="unnumbered">glyph: '71',</programlisting>
<simpara>Use <literal>Ext.setGlyphFontFamily();</literal> to set the icon font programmetically.</simpara>
</section>
<section id="_out_of_the_box_glyhs">
<title>Out of the box glyhs</title>
<programlisting language="javascript" linenumbering="unnumbered">var buttons = [];

for (var i = 33; i &lt; 127; i++) {
    buttons.push({
        xtype: 'button',
        text: i,
        scale: 'medium', // Try 'small' and 'large'
        glyph: i + '@Pictos'  // alternate config if Ext.setGlyphFontFamily() was not set
    });
}

Ext.create('Ext.panel.Panel', {
    renderTo: Ext.getBody(),
    title: 'Sample',
    height: 500,
    width: 620,
    defaults: {
        xtype: 'button',
        margin: 2
    },
    autoScroll: true,
    items: buttons
});</programlisting>
</section>
<section id="_icon_css_classes">
<title>Icon CSS Classes</title>
<simpara>Some components have no <literal>glyph</literal> property.
It&#8217;s still possible to create custom icons.</simpara>
<simpara>This trick can be done with the CSS pseudo selectors:
<literal>:before</literal> and <literal>:after</literal> that implement content
before or after the component in the DOM.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">.myclass:before {
    content: "C"; //character mapped to an icon
    font-family: 'MyIconFont'; //icon font

    color: red; //set additional colors or dimensions...
    margin-right: 10px;
}</programlisting>
</section>
<section id="_image_icons">
<title>Image icons</title>
<itemizedlist><title>It&#8217;s also possible to use images as icons.</title>
<listitem>
<simpara>
<literal>icon</literal> - path to an image
</simpara>
</listitem>
<listitem>
<simpara>
<literal>iconCls</literal> - a CSS class specifying a background image
</simpara>
</listitem>
<listitem>
<simpara>
<literal>iconAlign</literal> - align icon to <literal><emphasis>top</emphasis></literal>, <literal><emphasis>right</emphasis></literal>, <literal><emphasis>bottom</emphasis></literal> and <literal><emphasis>left</emphasis></literal>
</simpara>
</listitem>
</itemizedlist>
<programlisting language="javascript" linenumbering="unnumbered">Ext.create('Ext.panel.Panel', {
    title : 'Panel',
    renderTo : Ext.getBody(),
    height : 200,
    bodyPadding : 16,
    defaults : {
        margin: 8
    },
    layout : 'vbox',
    items : [{
        xtype : 'button',
        text : 'Sunny',
        icon : 'resources/images/weather_sun.png'
    }, {
        xtype : 'button',
        text : 'Rainy',
        icon : 'resources/images/weather_rain.png',
        iconAlign : 'right'
    }]
});</programlisting>
</section>
<section id="_build_2">
<title>Build</title>
<simpara>A <literal>build</literal> process is required in order to see the newly implemented fonts. This will copy and link the fonts to the build folder.</simpara>
<simpara><literal>sencha app build</literal></simpara>
</section>
</section>
</chapter>
<chapter id="_lab_implementing_assets">
<title>Lab: Implementing assets</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Imlpement images
</simpara>
</listitem>
<listitem>
<simpara>
Implement fonts
</simpara>
</listitem>
<listitem>
<simpara>
Implement custom icons &amp; glyphs
</simpara>
</listitem>
</itemizedlist>
<section id="_implement_images">
<title>Implement images</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Open with your editor the following file:</emphasis>
</simpara>
<simpara><emphasis>extreader/app/view/Header.js</emphasis></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Where indicated by the comment add an image tag that points to the following image</emphasis>
</simpara>
<simpara><literal>&lt;img src="resources/logo.png" height="25" alt="ExtReader"/&gt;</literal></simpara>
</listitem>
</orderedlist>
</section>
<section id="_implement_custom_fonts">
<title>Implement custom fonts</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Download a nice free font</emphasis>
</simpara>
<simpara>For example: Droid Sans. Make sure you download the full webfont-kit
<ulink url="http://www.fontsquirrel.com/fonts/Droid-Sans">http://www.fontsquirrel.com/fonts/Droid-Sans</ulink></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Unzip the package somewhere on your harddrive</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a new fonts folder</emphasis>
</simpara>
<simpara>Create this folder in: <emphasis>packages/resources</emphasis></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Copy all the fonts into the new folder</emphasis>
</simpara>
<simpara>The <emphasis>packages/resources/fonts</emphasis> folder.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open packages/Goggles/sass/etc/all.scss</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Setup fontface for DroidSansRegular and DroidSansBold</emphasis>
</simpara>
<example id="code5_setupfontface">
<title>Setup fontface for DroidSansRegular and DroidSansBold</title>
<programlisting language="HTML" linenumbering="unnumbered">/* fonts */
@font-face {
    font-family: 'DroidSansRegular';
    src: url('../resources/fonts/DroidSans-webfont.eot');
    src: url('../resources/fonts/DroidSans-webfont.eot?#iefix') format('embedded-opentype'),
         url('../resources/fonts/DroidSans-webfont.woff') format('woff'),
         url('../resources/fonts/DroidSans-webfont.ttf') format('truetype'),
         url('../resources/fonts/DroidSans-webfont.svg#DroidSansRegular') format('svg');
    font-weight: normal;
    font-style: normal;

}

@font-face {
    font-family: 'DroidSansBold';
    src: url('../resources/fonts/DroidSans-Bold-webfont.eot');
    src: url('../resources/fonts/DroidSans-Bold-webfont.eot?#iefix') format('embedded-opentype'),
         url('../resources/fonts/DroidSans-Bold-webfont.woff') format('woff'),
         url('../resources/fonts/DroidSans-Bold-webfont.ttf') format('truetype'),
         url('../resources/fonts/DroidSans-Bold-webfont.svg#DroidSansBold') format('svg');
    font-weight: normal;
    font-style: normal;
}</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Now we will make sure that these fonts only apply for the main center panel</emphasis>
</simpara>
<example id="code5_addfonts">
<title>Add styles for the .main CSS class</title>
<programlisting language="HTML" linenumbering="unnumbered">/* main feeds */
.main {
    font-family: 'DroidSansRegular';
    line-height: 1.6em;

    h1 {
        color: $blue;
        font-family: Arial, sans-serif;
        font-size: 20px;
        line-height: 24px;
    }

    a {
        color: $blue;
    }

    bold {
        font-family: 'DroidSansBold';
    }
}</programlisting>
</example>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the app</emphasis>
</simpara>
<simpara>So the theme knows the font locations and test your application. Your app should contain the new font, in the <emphasis>main</emphasis> center panel.</simpara>
</listitem>
</orderedlist>
</section>
<section id="_implement_custom_icons">
<title>Implement custom icons</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Go to <ulink url="http://icomoon.io/app">http://icomoon.io/app</ulink></emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Select the icons below, and download a package</emphasis>.
</simpara>
<itemizedlist><title>You will need the following icons:</title>
<listitem>
<simpara>
an icon for RSS feeds - you will map this icon to the <emphasis>r</emphasis> character
</simpara>
</listitem>
<listitem>
<simpara>
an icon for the help button -  you will map this icon to the <emphasis>h</emphasis> character
</simpara>
</listitem>
<listitem>
<simpara>
an icon for the subscribe button - you will map this icon to the <emphasis>s</emphasis> character
</simpara>
</listitem>
<listitem>
<simpara>
an icon for the form popup - you will map this icon to the <emphasis>e</emphasis> character
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Setup the font pack</emphasis>
</simpara>
<simpara>In the <emphasis>preferences</emphasis> screen select <emphasis>preferences</emphasis>, and give your font the name: <emphasis>ExtReader</emphasis>. Also check <emphasis>base64</emphasis> encoding.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Unzip the icon font pack somewhere on your harddrive</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Copy the font folder over</emphasis>
</simpara>
<simpara>Copy it to the fonts folder: <emphasis>extreader/resources/fonts</emphasis>
. <emphasis role="strong">Copy the CSS rules of style.css</emphasis></simpara>
<simpara>Copy it to: <emphasis>packages/sass/etc/</emphasis> and rename it to <emphasis>all.scss</emphasis>. Start with a comment: //font icons</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Open packages/sass/etc/all.scss and fix the path to resources/fonts/ExtReader.eot</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the app</emphasis>
</simpara>
<simpara>From now on the theme and the application know the icon font location.</simpara>
</listitem>
</orderedlist>
<section id="_glyphs">
<title>Glyphs</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Open extreader/app/view/Header.js</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Indicated by the comment, create a glyph attribute</emphasis>
</simpara>
<itemizedlist><title>Point it to some decimal unicode and the Icon font:</title>
<listitem>
<simpara>
The glyph for the subscribe button will map to the <emphasis>s</emphasis> character. Therefore you will need the decimal unicode that maps to the <emphasis>s</emphasis> character.
</simpara>
</listitem>
<listitem>
<simpara>
Use a converter to generate this: <ulink url="http://www.branah.com/unicode-converter">http://www.branah.com/unicode-converter</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis>s</emphasis> character will become an icon, when you use the correct font. Therefore also set the name font that should be used:
</simpara>
<programlisting language="HTML" linenumbering="unnumbered">glyph: ‘115@ExtReader’,</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a glyph for the help button</emphasis>
</simpara>
<simpara>Indicated by the comment; the help icon should map to the <emphasis>h</emphasis> character.
ou may uncomment the line with: <literal>text: ‘Help’</literal>, in that case you will have a button with only an icon and no text.</simpara>
</listitem>
</orderedlist>
<formalpara><title><emphasis role="strong">Create a glyph for the edit button</emphasis></title><para>+
Open <emphasis>extreader/controller/Main.js</emphasis>, where indicated by the comment, add a glyph that points to the <emphasis>e</emphasis> character of the iconfont.</para></formalpara>
</section>
<section id="_icon_classes">
<title>Icon Classes</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">On the bottom of the extreader/sass/etc/all.scss stylesheet add the styles of &lt;&lt;code5_iconclasses&gt;</emphasis>
</simpara>
<informalexample id="code5_iconclasses">
<formalpara><title>Create CSS classes that point to icons</title><para>
<programlisting language="HTML" linenumbering="unnumbered">.x-tree-node-text:before {
    content: "r";
    margin-right: 5px;
    font-family: 'ExtReader';
}</programlisting>
</para></formalpara>
</informalexample>
<simpara>This will make sure that every tree node (with class <literal>x-tree-node-text</literal>), has a little icon before the text. We set the content to the <emphasis>r</emphasis> character to map to the rss feed icon.
We do have to set a font that points to our icon font name, and we set a margin-right to align the icon nicely.</simpara>
</listitem>
</orderedlist>
</section>
</section>
</chapter>
<chapter id="_sharing_themes">
<title>Sharing Themes</title>
<section id="_objectives_9">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn about global themes
</simpara>
</listitem>
<listitem>
<simpara>
Learn about app specific themes
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_introduction_3">
<title>Introduction</title>
<simpara>Multiple apps can share the same theme,
since themes are located in the <emphasis role="strong">packages</emphasis> folder.</simpara>
<formalpara id="share_diagram2"><title>Multiple apps can share the same global theme.</title><para>image::images/sharediagram1.png</para></formalpara>
</section>
<section id="_app_specific">
<title>App specific</title>
<simpara>Now in the previous example, it wouldn&#8217;t make much sense that
the Audio app has a Stylesheet that contains styles for the video
player.</simpara>
<simpara>So there must be a way to also save CSS styles on app level.
That&#8217;s why each generated app has an own sass folder:
<emphasis role="strong">app/sass/</emphasis>.</simpara>
<formalpara id="share_diagram2"><title>Some styles are specific for apps, those styles shouldn&#8217;t be written in a global theme.</title><para>image::images/sharediagram2.png</para></formalpara>
</section>
<section id="_global_vs_app_specific">
<title>Global vs App specific</title>
<simpara>Styling that is not shared between applications belongs in the application itself, not in the theme. Sencha Cmd provides an easy way to add application-level styling by following the same pattern as theme styling. The application acts as the final level in the theme hierarchy. Applications can change theme variables, and they can add their own custom variables and rules for styling the application&#8217;s views.</simpara>
<simpara><emphasis role="strong">Global themes</emphasis> are saved in the <emphasis>packages/sass</emphasis> folder.<?asciidoc-br?>
<emphasis role="strong">App specific styles</emphasis> are saved in the <emphasis>myapp/sass/</emphasis> folder.</simpara>
</section>
<section id="_order_of_loading">
<title>Order of Loading.</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
First the <emphasis role="strong">Global Theme</emphasis> is loaded.
</simpara>
</listitem>
<listitem>
<simpara>
Then the <emphasis role="strong">app specific styles</emphasis>.
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_global_theme_folderstructure">
<title>Global theme folderstructure</title>
<simpara>As we have seen in lecture; a Global theme has the following folderstructure.</simpara>
<itemizedlist>
<listitem>
<simpara>
sass
</simpara>
<itemizedlist>
<listitem>
<simpara>
etc<?asciidoc-br?>
        contains additional utility functions or mixins<?asciidoc-br?>
        <emphasis>all.scss</emphasis><?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
src<?asciidoc-br?>
        contains Sass rules and UI mixins<?asciidoc-br?>
        <emphasis>button/Button.scss</emphasis><?asciidoc-br?>
        <emphasis>panel/Panel.scss</emphasis><?asciidoc-br?>
        <emphasis>&#8230;</emphasis><?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
var<?asciidoc-br?>
        contains Sass variables<?asciidoc-br?>
        <emphasis>button/Button.scss</emphasis><?asciidoc-br?>
        <emphasis>panel/Panel.scss</emphasis><?asciidoc-br?>
        <emphasis>&#8230;</emphasis><?asciidoc-br?>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>The files in the <emphasis>src</emphasis> and <emphasis>var</emphasis> folders are organized according the folderstructure of the framework.
For example to style a  <literal>Ext.grid.Panel</literal> you should create a folder and Sass file: <emphasis>grid/Panel.scss</emphasis>.</simpara>
</section>
<section id="_is_this_structure_for_styles_on_app_level_the_same">
<title>Is this structure for styles on app level the same?</title>
<simpara>No. It is different.
Although you could change it; in the (hidden) sencha config file:
<emphasis>myapp/.sencha/sencha.cfg</emphasis></simpara>
</section>
<section id="_sencha_cfg">
<title>sencha.cfg</title>
<simpara>By default when you generate an application with Sencha Cmd,
it is configured that app specific styles map to the filestructure of your application.</simpara>
<simpara>myapp/.sencha/sencha.cfg</simpara>
<programlisting language="javascript" linenumbering="unnumbered"># The root namespace to use when mapping scss resources to js classes
# in the sass/src and sass/var directories
app.sass.namespace=ExtReader</programlisting>
</section>
<section id="_app_specific_folderstructure">
<title>App specific folderstructure</title>
<simpara>To organize app specific Sass files, you should map your app file structure.
For example:</simpara>
<itemizedlist>
<listitem>
<simpara>
sass
</simpara>
<itemizedlist>
<listitem>
<simpara>
etc<?asciidoc-br?>
        contains additional utility functions or mixins<?asciidoc-br?>
        <emphasis>all.scss</emphasis><?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
src<?asciidoc-br?>
        contains Sass rules and UI mixins<?asciidoc-br?>
        <emphasis>view/Viewport.scss</emphasis><?asciidoc-br?>
        <emphasis>view/Header.scss</emphasis><?asciidoc-br?>
        <emphasis>view/Grid.scss</emphasis><?asciidoc-br?>
        <emphasis>&#8230;</emphasis><?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
var<?asciidoc-br?>
        contains Sass variables<?asciidoc-br?>
        <emphasis>view/Viewport.scss</emphasis><?asciidoc-br?>
        <emphasis>view/Header.scss</emphasis><?asciidoc-br?>
        <emphasis>view/Grid.scss</emphasis><?asciidoc-br?>
        <emphasis>&#8230;</emphasis><?asciidoc-br?>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><emphasis>src/view/Viewport.scss</emphasis>  because of <literal>MyApp.view.Viewport</literal><?asciidoc-br?>
<emphasis>src/view/Header.scss</emphasis> because of <literal>MyApp.view.Header</literal><?asciidoc-br?>
<emphasis>src/view/Grid.scss</emphasis> because of <literal>MyApp.view.Grid.scss</literal></simpara>
</section>
<section id="_who_is_winning">
<title>Who is winning?</title>
<simpara>Ok, you&#8217;ve created a global theme and some app specific styles.
Let&#8217;s say you set a <literal>$base-color</literal> on both.
A blue $base-color in the global theme and a red $base-color in the app specific styles.</simpara>
<simpara>Who is winning?</simpara>
</section>
<section id="_answer">
<title>Answer</title>
<simpara>You would think the app specific variable would win&#8230;
But this is not the case. The global theme will always win, unless you
allow variables to be overruled.</simpara>
</section>
<section id="_default">
<title>!default</title>
<simpara>The <literal>!default</literal> setting, can set a default value for a variable.</simpara>
<simpara>The <literal>!default</literal> setting can allow a variable in your <emphasis role="strong">global theme</emphasis> to be overruled by a variable
in an app specific theme.</simpara>
<simpara><emphasis>It&#8217;s not the same as <literal>!important</literal>; that&#8217;s the opposite (but on CSS rules, not on Sass variables);
When you set this, you can <emphasis role="strong">not</emphasis> override the CSS rule. Therefore <literal>!important</literal> is a bad practice.</emphasis></simpara>
</section>
<section id="_example_41">
<title>Example</title>
<simpara>See the next slides for an example of this works.</simpara>
<section id="_create_app_specific_styles">
<title>Create app specific styles</title>
<simpara>This app has a <literal>MyApp.view.Viewport</literal> class;
so we will apply the <literal>$base-color</literal> to this component on app level.</simpara>
<formalpara><title>myapp/sass/src/view/Viewport.scss</title><para>
<programlisting language="javascript" linenumbering="unnumbered">$base-color: red;</programlisting>
</para></formalpara>
<formalpara id="share_red"><title>The app specific styles are winning. (The only available styles.)</title><para>image::images/share_red.png</para></formalpara>
</section>
<section id="_create_a_new_theme">
<title>Create a new theme</title>
<simpara>Assign a new theme to your app.
Every Ext view component extends from <literal>Ext.Component</literal>,
so we will apply the <literal>$base-color</literal> globally to this component.</simpara>
<formalpara><title>packages/mytheme/sass/src/Component.scss</title><para>
<programlisting language="javascript" linenumbering="unnumbered">$base-color: blue;</programlisting>
</para></formalpara>
<formalpara id="share_blue"><title>The global theme is winning. (In general global themes always win.)</title><para>image::images/share_blue.png</para></formalpara>
</section>
<section id="_overwrite_global_vars">
<title>Overwrite global vars</title>
<simpara>Change the global theme to allow variable overwrites.</simpara>
<formalpara><title>packages/mytheme/sass/etc/all.scss</title><para>
<programlisting language="javascript" linenumbering="unnumbered">$base-color: blue !default;</programlisting>
</para></formalpara>
<formalpara id="share_red2"><title>The app specific styles are winning. (Global variable allows to be overwritten.)</title><para>image::images/share_red.png</para></formalpara>
</section>
</section>
</chapter>
<chapter id="_lab_organizing_theme">
<title>Lab: Organizing theme</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Organize global variables
</simpara>
</listitem>
<listitem>
<simpara>
Organize global styles
</simpara>
</listitem>
</itemizedlist>
<section id="_organizing_global_variables">
<title>Organizing global variables</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
Start with watching the application, so the application will build automatically every time you hit save.
</simpara>
<programlisting language="javascript" linenumbering="unnumbered">sencha app watch</programlisting>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create var/Component.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Open <emphasis>packages/Goggles/etc/all.scss</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Create a new file <emphasis>Component.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste:
</simpara>
<itemizedlist>
<listitem>
<simpara>
my custom variables
</simpara>
</listitem>
<listitem>
<simpara>
all default styles (<literal>base-color</literal>, <literal>neutral-color</literal>, <literal>color</literal>, <literal>font-family</literal> and <literal>font-size</literal>)
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Add suffix <literal>!default</literal> on the end of the variable of <literal>$base-color</literal>
to specify; this variable can be changed by a theme on app level.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create var/toolbar/Toolbar.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>toolbar/Toolbar.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the toolbar variables
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create var/button/Button.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>button/Button.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the button variables
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
* Create var/panel/Panel.scss*
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>panel/Panel.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the panel variables
</simpara>
</listitem>
<listitem>
<simpara>
Add suffix <literal>!default</literal> on the end of the variable of <literal>$panel-header-background-color</literal>
to specify; this variable can be changed by a theme on app level.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create var/window/Window.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>window/Window.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the window variables
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create var/grid/Panel.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>grid/Panel.scss</emphasis> in <emphasis>packages/Goggles/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the grid variables
</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section id="_organizing_global_styles_amp_mixins">
<title>Organizing global styles &amp; mixins</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Create src/Component.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create the file <emphasis>Component.scss</emphasis> in <emphasis>packages/Goggles/src</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste all the default styles &amp; font-face lines
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create src/tree/Panel.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>tree/Panel.scss</emphasis> in <emphasis>packages/Goggles/src/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the styles for trees.
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the panel ui mixin (from <emphasis>packages/Goggles/src/Component.scss</emphasis>) over to this file.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a new file &amp; folder button/Button.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create this folder and file in <emphasis>packages/Goggles/sass/src</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste all the button ui mixins (from <emphasis>packages/Goggles/src/Component.scss</emphasis>) over to this file.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a new file &amp; folder toolbar/Toolbar.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create this folder and file in <emphasis>packages/Goggles/sass/src</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the toolbar ui mixin (from <emphasis>packages/Goggles/src/Component.scss</emphasis>) over to this file.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a new file &amp; folder window/Window.scss</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create this folder and file in <emphasis>packages/Goggles/sass/src</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the window ui mixin (from <emphasis>packages/Goggles/src/Component.scss</emphasis>) over to this file.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section id="_organizing_app_specific_variables">
<title>Organizing app specific variables</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Create vars/view/Viewport.scss in your app.</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>view/Viewport.scss</emphasis> in <emphasis>extreader/sass/var/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Overwrite the global theme CSS rules.
</simpara>
<simpara>The panel header background, will become blue.
The base-color will be a lighter gray.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">$base-color: #f2f2f2;
$panel-header-background-color: #528cf1;</programlisting>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section id="_organizing_app_specific_styles">
<title>Organizing app specific styles</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Create src/view/Viewport.scss in your app.</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Create a new file/folder <emphasis>view/Viewport.scss</emphasis> in <emphasis>extreader/sass/src/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
Copy and paste the icon font and the icon CSS classes over to the <emphasis>src/view/Viewport.scss</emphasis> file on app level.
</simpara>
<simpara>Now these icons are only available for the Ext Reader app.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Build the application</emphasis>
</simpara>
<simpara>Preview and test the template.</simpara>
<figure id="lab7_organize"><title>Preview of the new Goggles theme</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/extreader-organize.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/extreader-organize.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter id="_performance">
<title>Performance</title>
<section id="_objectives_10">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn how to optimize the Stylesheet
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_introduction_4">
<title>Introduction</title>
<simpara>There are some tricks to improve performance of your web application that are related to your CSS styling.
The smaller your CSS Stylesheet, the better performance.</simpara>
<simpara>We will talk about the following topics:</simpara>
<itemizedlist>
<listitem>
<simpara>
Change CSS output for used components
</simpara>
</listitem>
<listitem>
<simpara>
Remove CSS output for supported browsers
</simpara>
</listitem>
<listitem>
<simpara>
Compress CSS Stylesheet
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_sencha_app_build">
<title>Sencha app build</title>
<simpara>While building your application with Sencha Cmd, two important tricks
to improve CSS performance are <emphasis role="strong">automically</emphasis> included in the build process:</simpara>
<itemizedlist>
<listitem>
<simpara>
Remove unused CSS rules
</simpara>
</listitem>
<listitem>
<simpara>
Compress CSS Stylesheet
</simpara>
</listitem>
</itemizedlist>
<programlisting language="javascript" linenumbering="unnumbered">sencha app build
//or
sencha app watch</programlisting>
</section>
<section id="_changes_css_output">
<title>Changes CSS output</title>
<simpara>When you build your application with Sencha Cmd, your CSS file will contain
only the CSS needed for the components you are actually using.
This also works for views you define, so your application can organize its Sass as a mirror
image of its JavaScript — a huge help as your application grows over time.</simpara>
</section>
<section id="_what_happends_under_the_hood">
<title>What happends under the hood</title>
<simpara>Your CSS output specific for the application will be automatically maintained by Sencha Cmd.
You can find exactly an overview of all the styles that are included and excluded in
the following file:</simpara>
<simpara><emphasis>/build/ExtReader/production/Goggles.scss</emphasis></simpara>
</section>
<section id="_compress_css">
<title>Compress CSS</title>
<simpara>When using Sencha Cmd, it will automatically compress your generated CSS file. Under the hood, this has been done by Compass which runs in Sencha Cmd based on the output_style setting in <emphasis role="strong">config.rb</emphasis></simpara>
<table id="compression"
frame="all"
rowsep="1" colsep="1"
>
<title>Compression levels</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Setting</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tfoot>
<row>
<entry align="left" valign="top"><simpara><literal>:compressed</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It’s not meant to be human-readable. (This setting is used when you create a production build.)</simpara></entry>
</row>
</tfoot>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>:nested</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Nested style is the default Sass style, because it reflects the structure of the CSS styles and the HTML document they’re styling. Each property has its own line, but the indentation isn’t constant. Each rule is indented based on how deeply it’s nested.
(This setting is used when you create a test build.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>:expanded</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Expanded is a more typical human-made CSS style, with each property and rule taking up one line. Properties are indented within the rules, but the rules aren’t indented in any special way.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>:compact:</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Compact style takes up less space than Nested or Expanded. It also draws the focus more to the selectors than to their properties. Each CSS rule takes up only one line, with every property defined on that line. Nested rules are placed next to each other with no newline, while separate groups of rules have newlines between them.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section id="_performance_variables">
<title>Performance Variables</title>
<simpara>In general frameworks are made to support as much usecases and browsers.
Sencha Touch has some Sass variables that are related to performance;
(it increases your Stylesheet), by default they are enabled (set to <literal>true</literal>)
to support all these usecases and browsers.</simpara>
<simpara>The next slides explain, which settings you can turn off if you don&#8217;t support
that particular usecase or browser.</simpara>
<section id="_disable_browsers">
<title>Disable browsers</title>
<simpara>By default Ext JS includes all browsers,
these variables are set to <literal>true</literal>. However if you don&#8217;t support
a particular browser you can disable these so the file size
of your Stylesheet will become smaller.</simpara>
<itemizedlist><title>Set these variables on app level</title>
<listitem>
<simpara>
<literal>$include-chrome</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$include-ff</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$include-ie</literal> (Old IE (&lt; IE10))
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$include-opera</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$include-safari</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>$include-webkit</literal>
</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS</ulink></simpara>
</section>
<section id="_more_information">
<title>More information</title>
<simpara>The "good" browsers (chrome/ff/safari/opera) require very few browser-specific hacks and thus you will see little or no difference in CSS file size when turning these rules off.</simpara>
<simpara>The big one is $include-ie.
$include-ie will turn off all IE-specific rules for IE9 and below.
IE10 is considered a modern browser - the rules that work in the other modern browsers also work in IE10, so there are no IE10-specific hacks required.</simpara>
</section>
<section id="_disable_not_found_images">
<title>Disable not found images</title>
<simpara>Enable the inclusion of files which are not found when compiling your Sass.
This setting is enabled by default.</simpara>
<simpara><literal>$include-not-found-images</literal></simpara>
<simpara>You&#8217;ll only see a decrease in file size if your stylesheet references images that do not exist on disc - most themes should not reference non-existent images.</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_var-S-include-not-found-images">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_var-S-include-not-found-images</ulink></simpara>
</section>
<section id="_disable_default_uis">
<title>Disable default uis</title>
<simpara>True to include the default UI for each component.</simpara>
<simpara><literal>$include-default-uis</literal></simpara>
<simpara>This controls the generation of the "default" ui for components.  If set to false, you wouldn&#8217;t get the default styling for panels, buttons, etc.  So this should greatly reduce the stylesheet size, but you probably wouldn&#8217;t want to do this, since it disables default styling.</simpara>
<simpara><ulink url="http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_var-S-include-default-uis">http://docs.sencha.com/extjs/4.2.1/#!/api/Global_CSS-css_var-S-include-default-uis</ulink></simpara>
</section>
</section>
</chapter>
<chapter id="_theming_with_sencha_architect">
<title>Theming with Sencha Architect</title>
<section id="_objectives_11">
<title>Objectives</title>
<itemizedlist>
<listitem>
<simpara>
Learn about app templates
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to create a theme with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to use variables in Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to use skins (mixins) in Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to implement images in Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to implement custom CSS
</simpara>
</listitem>
<listitem>
<simpara>
Learn how to export a theme in Sencha Architect
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_introduction_5">
<title>Introduction</title>
<section id="_open_a_sencha_architect_project">
<title>Open a Sencha Architect project</title>
</section>
<section id="_create_a_theme">
<title>Create a theme</title>
</section>
<section id="_theming">
<title>Theming</title>
<section id="_vars">
<title>Vars</title>
</section>
<section id="_skins">
<title>Skins</title>
</section>
<section id="_images_2">
<title>Images</title>
</section>
</section>
<section id="_how_to_create_custom_css">
<title>How to create custom CSS</title>
</section>
<section id="_exporting">
<title>Exporting</title>
</section>
</section>
</chapter>
<chapter id="_lab_theming_with_sencha_architect">
<title>Lab:  Theming with Sencha Architect</title>
<itemizedlist><title>Objectives</title>
<listitem>
<simpara>
Create a custom theme with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Extend from a Sencha theme with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Create a color palette
</simpara>
</listitem>
<listitem>
<simpara>
Theme with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Create styles for templates with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Create a custom UI with Sencha Architect
</simpara>
</listitem>
<listitem>
<simpara>
Save themes in the toolbox
</simpara>
</listitem>
</itemizedlist>
<section id="_starting_sencha_architect">
<title>Starting Sencha Architect</title>
<orderedlist numeration="arabic"><title>Steps</title>
<listitem>
<simpara>
<emphasis role="strong">Start Sencha Architect</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Press: <emphasis>Create New</emphasis></emphasis>
</simpara>
<simpara>See <xref linkend="lab8_start"/>.</simpara>
</listitem>
</orderedlist>
<figure id="lab8_start"><title>Start Sencha Architect</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_start.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_start.png</phrase></textobject>
</mediaobject>
</figure>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Choose: <emphasis>starter apps &gt; Task List</emphasis></emphasis>
</simpara>
<simpara>Sencha Architect will start with a default working app: <emphasis>The Task List</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Press the <emphasis>Save</emphasis> button</emphasis>
</simpara>
<simpara>Save the project under: <emphasis>htdocs/advancedtheming/</emphasis>. Give it the project name: <emphasis>tasklist</emphasis></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Press the <emphasis>Settings</emphasis> button</emphasis>
</simpara>
<simpara>Set the url prefix to: <emphasis>http://localhost/advancedtheming/tasklist</emphasis></simpara>
<simpara>See <xref linkend="lab8_setup"/>.</simpara>
</listitem>
</orderedlist>
<figure id="lab8_setup"><title>Save Sencha Architect Project</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_setup.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_setup.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_creating_and_extending_from_a_sencha_theme">
<title>Creating and extending from a Sencha theme</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">In the toolbox, filter on <emphasis>Themes</emphasis></emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Select the <emphasis>Neptune based theme</emphasis> and drag this into the <emphasis>Project Inspector &gt; Resources</emphasis></emphasis>
</simpara>
<simpara>When it worked correct, Sencha Architect will ask you if you want to apply this theme. Click <emphasis>Yes</emphasis>. In your <emphasis>Project Inspector &gt; Resources</emphasis> you will see <emphasis>MyNeptuneTheme(applied)</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Rename the theme</emphasis>
</simpara>
<simpara>Select the <emphasis>MyNeptuneTheme</emphasis> and in the config panel change the name to:
<emphasis>DarkTheme</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Select the Globals tab</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create a color palette</emphasis>
</simpara>
<simpara>Filter for <literal>base-color</literal>. Click the color, and in the color picker, select the colors below and add these to the palette:</simpara>
<itemizedlist>
<listitem>
<simpara>
#474747
</simpara>
</listitem>
<listitem>
<simpara>
#373737
</simpara>
</listitem>
<listitem>
<simpara>
#313131
</simpara>
</listitem>
<listitem>
<simpara>
#232323
</simpara>
</listitem>
<listitem>
<simpara>
#dddddd
</simpara>
</listitem>
<listitem>
<simpara>
#94fd8a
</simpara>
</listitem>
<listitem>
<simpara>
#60a500
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the base-color</emphasis>
</simpara>
<simpara>Still in the color palette, ivoked from the <literal>base-color</literal> property, select the color <literal>#313131</literal> in the palette and press <emphasis>ok</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the toolbar background color</emphasis>
</simpara>
<simpara>Filter for: <literal>toolbar background</literal> and change the white color to the color <literal>#474747</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the panel body background</emphasis>
</simpara>
<simpara>Filter for: <literal>panel body background</literal> and change the white color to the color <literal>#474747</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the panel body color</emphasis>
</simpara>
<simpara>Filter for: <literal>panel body color</literal> and change the black color to the color <literal>#dddddd</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the row bg color</emphasis>
</simpara>
<simpara>Filter for: <literal>row bg color</literal> and change the white color to the color <literal>#373737</literal>.</simpara>
</listitem>
<listitem>
<simpara>
*Create the row border color
</simpara>
<simpara>Filter for: <literal>row border color</literal> and change the gray color to the color <literal>#232323</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the grid column header color</emphasis>
Filter for: <literal>grid column header color</literal> and change the <literal>grid column header color</literal> to <literal>#232323</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the grid column header font</emphasis>
</simpara>
<simpara>Filter for: <literal>grid columm header font</literal> and change it to <literal>bold 11px Helvetica</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the grid header background color</emphasis>
</simpara>
<simpara>Filter for: <literal>grid header background color</literal> and change the <literal>grid column header color</literal> to #dddddd.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the grid row cell over background color</emphasis>
</simpara>
<simpara>Filter for: <literal>grid row cell over background color</literal> and change the color to <literal>#232323</literal></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the grid cell selected background color</emphasis>
</simpara>
<simpara>Filter for <literal>grid cell selected background color</literal> and change the color to <literal>#232323</literal></simpara>
</listitem>
</orderedlist>
<screen>Can't find the properties you are filtering for?
Make sure you select the Resources &gt; DarkTheme
and click the Globals tab.</screen>
</section>
<section id="_creating_styles_for_templates_tpls">
<title>Creating styles for templates (tpls)</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">In the project inspector, select Views &gt; priority &gt; tpl</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Change the image height</emphasis>
</simpara>
<simpara>In the <emphasis>code</emphasis> view, give the image an attribute +height="10".</simpara>
<simpara></simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Select the tpl styles</emphasis>
</simpara>
<simpara>In the <emphasis>Project Inspector</emphasis> select <emphasis>Views &gt; mainView &gt; detailsView &gt; tpl2</emphasis>.</simpara>
<simpara>In the <emphasis>config</emphasis> panel, click on the plus button (<emphasis>+</emphasis>) next to the <emphasis>scss</emphasis> property. After that, press the icon with the <emphasis>arrow to the right</emphasis>.</simpara>
<simpara>See <xref linkend="lab8_tpl1"/> and <xref linkend="lab8_tpl2"/>.</simpara>
</listitem>
</orderedlist>
<figure id="lab8_tpl1"><title>Create custom styles for tpls</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_tpl1.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_tpl1.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="lab8_tpl2"><title>Create custom styles for tpls (part 2)</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_tpl2.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_tpl2.png</phrase></textobject>
</mediaobject>
</figure>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Open the tpl code</emphasis>
</simpara>
<simpara>Under <literal>tpl2_ there should be a +scss</literal> file, double click to open it in the <emphasis>code editor</emphasis> view.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Add the custom styles</emphasis>
</simpara>
<simpara>Enter the following styles (See <xref linkend="code8_tpl"/>) and wait till Architect finished compiling.</simpara>
<example id="code8_tpl">
<title>Custom styles for templates</title>
<programlisting language="HTML" linenumbering="unnumbered">h1 {
    margin: 30px 10px 0;
    text-shadow: #000 0.1em 0.1em 0.3em;
}

p {
    margin: 10px;
    text-shadow: #000 0.1em 0.1em 0.3em;
}</programlisting>
</example>
<simpara>See <xref linkend="lab8_tpl3"/>.</simpara>
</listitem>
</orderedlist>
<figure id="lab8_tpl3"><title>Create custom styles for tpls (part 3)</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_tpl3.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_tpl3.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>+</simpara>
<screen>Note: save your Architect project after Architect
is done with compiling...</screen>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Preview the TaskList app in your browser</emphasis>
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_create_a_new_button_ui">
<title>Create a new button UI</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">In design mode, select the <emphasis>add task</emphasis> button</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Select the <emphasis>Skins</emphasis> tab</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Click on the <emphasis>+</emphasis> button to create a new UI for the button</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Click on the <emphasis>R</emphasis> button to rename the new UI</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Create the background color</emphasis>
</simpara>
<simpara>Filter for: <literal>background color</literal> and change the color+ to #60a500.</simpara>
<screen>Note currently there is a bug that does not apply
background colors to buttons in toolbars.</screen>
</listitem>
</orderedlist>
</section>
<section id="_reusing_themes">
<title>Reusing themes</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis role="strong">Save the theme to toolbox</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
Select the <emphasis>DarkTheme</emphasis> theme_.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>Right click &gt; save to toolbox</emphasis>
</simpara>
<figure id="lab8_end"><title>Example of the custom DarkTheme in Sencha Architect</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/architect_endresult.png" scale="75"/>
  </imageobject>
  <textobject><phrase>images/architect_endresult.png</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<simpara>//////BONUS extending from Base theme
////include::_lab9.asciidoc[]</simpara>
</section>
</chapter>
<appendix id="_setup_guide">
<title>Setup Guide</title>
<itemizedlist><title>Lab materials</title>
<listitem>
<simpara>
Course Goodies: TODO
</simpara>
</listitem>
</itemizedlist>
<itemizedlist><title>Required software</title>
<listitem>
<simpara>
Java 7 JDK
</simpara>
</listitem>
<listitem>
<simpara>
Sencha Cmd 4.0.x
</simpara>
</listitem>
<listitem>
<simpara>
Sencha Architect 3.0 (preview)
</simpara>
</listitem>
<listitem>
<simpara>
IDE or Editor of choice
</simpara>
</listitem>
<listitem>
<simpara>
Modern browser
</simpara>
</listitem>
<listitem>
<simpara>
Ruby 1.x
</simpara>
</listitem>
<listitem>
<simpara>
Sass
</simpara>
</listitem>
<listitem>
<simpara>
Compass
</simpara>
</listitem>
</itemizedlist>
<tip><simpara>Some steps require that you work on the command line:<?asciidoc-br?>
<emphasis role="strong">Windows users can open the Command Prompt:</emphasis><?asciidoc-br?>
<literal>Start &gt; Run</literal>. Type: <literal>cmd</literal> and press <emphasis>ok</emphasis> <?asciidoc-br?>
<emphasis role="strong">Mac users can open the Terminal:</emphasis><?asciidoc-br?>
 +<literal>Applications &gt; Utils &gt; Terminal</literal></simpara></tip>
<section id="_java_run_time_environment">
<title>Java Run-time environment</title>
<simpara>Download Java 7 JDK and run the installer
<ulink url="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</ulink></simpara>
</section>
<section id="_sencha_cmd">
<title>Sencha Cmd</title>
<simpara>With Sencha Cmd you can start scaffolding a new project, minifying and deploying your application to production. In case you have the old Sencha SDK tools installed please remove it.</simpara>
<simpara>Download Sencha Cmd and run the installer:<?asciidoc-br?>
<ulink url="http://www.sencha.com/products/sencha-cmd/download">http://www.sencha.com/products/sencha-cmd/download</ulink></simpara>
<simpara>Remember where you installed the Sencha Cmd directory and the version number you
are using. By default, the installation path is:<?asciidoc-br?>
Windows: <literal>C:\Users\Me\bin\Sencha\Cmd\{cmd-vers}</literal><?asciidoc-br?>
Mac OS X: <literal>~/bin/Sencha/Cmd/{cmd-vers}</literal><?asciidoc-br?>
Linux: <literal>~/bin/Sencha/Cmd/{cmd-vers}</literal><?asciidoc-br?></simpara>
<formalpara><title>Optional</title><para>Enter the following command in your console or terminal: <literal>sencha</literal>.
It should prompt all the Sencha commands and options.
In case you don&#8217;t see anything you can close your terminal and you will need to add Sencha Cmd to your class path:</para></formalpara>
<simpara><emphasis role="strong">Windows users</emphasis>:<?asciidoc-br?>
<literal>Start &gt; Control Panel &gt; Performance and Maintenance &gt; System</literal><?asciidoc-br?>
In your system properties click on the <literal>Advanced</literal> tab.<?asciidoc-br?>
Click the <literal>Environment Variables</literal> button.
Edit the <literal>classpath</literal> variable or create a new variable called: <literal>classpath</literal>
Add the following value and save:<?asciidoc-br?>
<literal>C:\Users\Me\bin\Sencha\Cmd\{cmd-vers}</literal><?asciidoc-br?>
Make sure you are entering the correct path and version number.</simpara>
<simpara><emphasis role="strong">Mac users</emphasis>:<?asciidoc-br?>
Make hidden files visible.
To achieve this, type the following command in your terminal:<?asciidoc-br?>
<literal>defaults write com.apple.finder AppleShowAllFiles TRUE</literal><?asciidoc-br?>
<literal>killall Finder</literal><?asciidoc-br?>
(running these commands with <literal>FALSE</literal> will hide the files again)
Now open <emphasis>~.bash_profile</emphasis>.<?asciidoc-br?>
Add the following commands and save the file:<?asciidoc-br?>
<literal>export PATH=/Users/username/bin/Sencha/Cmd/{cmd-vers}:$PATH</literal> <?asciidoc-br?>
Make sure you are entering the correct path and version number.</simpara>
</section>
<section id="_sencha_architect_3_0">
<title>Sencha Architect 3.0</title>
<simpara>Download the installer for the preview version from:
<ulink url="http://sc13-live.sencha.com/">http://sc13-live.sencha.com/</ulink></simpara>
<simpara>Run the installer, and login by using the (or creating) Sencha forum ID.</simpara>
</section>
<section id="_ide_or_editor">
<title>IDE or Editor</title>
<simpara>You can use any IDE or Editor you like.
I&#8217;m using: Sublime Text (for it\' simplicity) - <ulink url="http://www.sublimetext.com/">http://www.sublimetext.com/</ulink></simpara>
<tip><simpara>I recommend that your editor includes JavaScript syntax checking similar to JSLint.</simpara></tip>
</section>
<section id="_modern_browser">
<title>Modern browser</title>
<simpara>Sencha Touch requires you use a modern browser, like Google Chrome, Safari, IE10 or Firefox 24+
I prefer Safari or Google Chrome.
To install Google Chrome just download and run the installer:
<ulink url="https://www.google.com/intl/en/chrome/browser/">https://www.google.com/intl/en/chrome/browser/</ulink></simpara>
</section>
<section id="_ruby_sass_and_compass">
<title>Ruby, Sass and Compass</title>
<simpara>Check if Ruby, Sass or Compass is installed with the following commands for the
command line:<?asciidoc-br?>
<literal>ruby -v</literal><?asciidoc-br?>
<literal>compass -v</literal><?asciidoc-br?>
<literal>sass -v</literal><?asciidoc-br?>
It should prompt you with a version number.
If it does not output a version number you will need to install it.</simpara>
<simpara>To install Sass and Compass to your development environment, you will need to have Ruby installed. This is automatically installed for Mac OS X users. Windows users can download and run the installer from:  <ulink url="http://rubyinstaller.org">http://rubyinstaller.org</ulink>
(Do not download the Ruby 2.x version.)</simpara>
<formalpara><title>To install Sass and Compass for Windows:</title><para>Enter the following commands in the command line:
<literal>gem install compass</literal><?asciidoc-br?>
Wait until the process is completed. It will take a few minutes before the
command completes and the command prompt returns.<?asciidoc-br?>
<literal>gem install sass -v 3.1.1</literal>
Wait until the process is completed</para></formalpara>
<formalpara><title>To install Sass and Compass for Mac OS X:</title><para>Enter the following commands in the command line:
<literal>sudo gem install compass</literal><?asciidoc-br?>
Wait until the process is completed. It will take a few minutes before the
command completes and the command prompt returns.<?asciidoc-br?>
<literal>sudo gem install sass -v 3.1.1</literal>
Wait until the process is completed</para></formalpara>
</section>
</appendix>
</book>
